@node Using GNU Emacs, Compiling with Makefiles, Legal issues with Free Software, Top
@chapter Using GNU Emacs

@menu
* Introduction to Emacs::       
* Installing GNU Emacs::        
* Configuring GNU Emacs::       
* Using Emacs::                 
* Using vi emulation::          
* More about configuring Emacs::  
* Inserting copyright notices with Emacs::  
* Using Emacs as an email client::  
* Handling patches::            
* Further reading on Emacs::    
@end menu

@node Introduction to Emacs, Installing GNU Emacs, Using GNU Emacs, Using GNU Emacs
@section Introduction to Emacs

Emacs is an environment for running Lisp programs that manipulate text
interactively. One way of thinking about Emacs is not as a mere editor
but more as an @dfn{editor builder}.
However, because Emacs is completely programmable, it is used to 
implement not only editors, but a full 
@dfn{integrated development environment} for software development. Emacs can 
also browse info documentation, run email clients, a newsgroup reader, 
a sophisticated xterm, and an understanding psychotherapist. 

Under the X window system, Emacs controls multiple x-windows
called @dfn{frames}. Each frame has a menubar and the main editing area.
The editing area is divided into @dfn{windows} with horizontal bars.
You can grab these bars and move them around with the first mouse button.
@footnote{Note that in Emacs parlance a @dfn{window} is not an X window.
A frame is an X window. A @dfn{window} is a region within the frame.}
Each window is bound to a @dfn{buffer}. A buffer is an Emacs data structure
that contains text. Most editing commands operate on buffers, modifying
their contents. When a buffer is bound to a window, then you can see its
contents as they are being changed. It is possible for a buffer to be bound
to two windows, on different frames or on the same frame. Then whenever
a change is made to the buffer, it is reflected on both windows. It is
not necessary for a buffer to be bound to a window, in order to operate on
it. In a typical Emacs session you may be manipulating more buffers than 
the windows that you have on your screen. 

A buffer can be @dfn{visiting} files. In that case, the contents of the
buffer reflect the contents of a file that is being editted. But buffers
can be associated with anything you like, so long as you program
it up. For example, under the Dired directory editor, a buffer is bound
to a directory, showing you the contents of the directory. When you
press @key{Enter} while the cursor is over a file name, Emacs creates
a new buffer, visits the file, and rebinds the window with that buffer.
From the user's perspective, by pressing @key{Enter} he ``opened'' the
file for editing. If the file has already been ``opened'' then Emacs
simply rebinds the existing buffer for that file. 

Emacs uses a variant of LISP, called Emacs LISP, as its programming language.
Everytime you press a key, click the mouse, or select an entry from the
menubar, an Emacs LISP function is evaluated. The @dfn{mode} of the
buffer determines, among many other things, what function to evaluate.
This way, every buffer can be associated with functionality that defines
what you do in that buffer. For example you can program your buffer to edit
text, to edit source code, to read news, and so on. You can also run
LISP functions directly on the current buffer by typing @code{M-x} and
the name of the function that you want to run.
@footnote{M-x means @kbd{@key{ALT}-x}. If you do not have an @key{ALT} key,
then use @kbd{@key{ESC} x} instead.}

What is known as the ``Emacs editor'' is the default implementation of
an editor under the Emacs system. If you prefer the vi editor, then you
can instead run a vi clone, Viper (@pxref{Using vi emulation}).
The main reason why you should use Emacs, is not the particular editor,
but the way Emacs integrates editing with all the other functions that
you like to do as a software developer. For example:
@itemize @bullet
@item
You can edit multiple files under one program. From the user
perspective, you can edit two different parts of a file under two different
x-windows. And when you revisit a file, the cursor is placed where it was
the last time you were editing the file.
@item
You can quickly browse a directory and navigate from file to file.
You can also do simple operations on files, without needing to go to
a shell.
@item
You can transparently edit files over FTP. This is extremely valuable
if you are editing source code on a remote computer and you are connected
through a modem link. 
@item
You can have a running shell for typing unix commands, and access the same
shell from any Emacs frame.
You can use that shell to run @samp{reconf}, @samp{configure} and 
@samp{make}. You can also save the contents of your session to a file.
@item
Color is used to highlight syntactic information about the text.
This makes browsing more pleasing to the eye, and it can also help you
catch syntactic mistakes. Emacs understands the syntax of most types
of files you are likely to edit and will color them up for you accordingly.
@item
When you edit source code under Emacs, it will automatically be formatted
for you to conform to the GNU coding standards. At your request, 
appropriate copyright notices can be inserted.
(@pxref{Inserting copyright notices with Emacs})
@item
When you make changes to a file, Emacs can automatically warp you to the 
appropriate @file{ChangeLog} file to record your changes. It will
handle formatting details for you allowing you to focus on content.
(@pxref{Maintaining the documentation files})
@item
Emacs is invaluably helpful for writing Texinfo documentation. In fact,
it is excruciatingly painful to maintain Texinfo documentation without
using Emacs. 
(@pxref{GNU Emacs support for Texinfo})
@item
You can run the @file{gdb} debugger under Emacs and use it to step
through your code. As you do that, Emacs will show you on a separate buffer
the code that is currently being stepped through.
@item
You can read email and newsgroups. If you are connected over a modem, 
all your editing is done locally, so you do not get bogged down by the
speed of your connection. 
You can apply patches that you get through email or news
to your source code directly, without needing to save the message to a file.
@item
Emacs currently supports almost every international language, even
languages that do not use the Roman alphabet, like Greek, Chinese, Hebrew,
Tibetan,etc.
@end itemize

All of these features make Emacs a very powerful, albeit unusual, 
integrated development environment. 
Many users of proprietary operating
systems, like Lose95
@footnote{Many individuals refer to @dfn{Microsoft Windows 95} as Win95.
In hacker terminology, a @dfn{win} is something that is good. We do not
believe that Microsoft Windows 95 is a good operating system, therefore
we call it Lose95},
complain that GNU (and Unix) does not have an integrated development 
environment. As a matter of fact it does. All of the above features make Emacs
a very powerful IDE. 

Emacs has its own very extensive documentation 
(@pxref{Further reading on Emacs}). In this manual we will only go over
the fundamentals for using Emacs effectively 
as an integrated development environment.

@c ============================================================

@node Installing GNU Emacs, Configuring GNU Emacs, Introduction to Emacs, Using GNU Emacs
@section Installing GNU Emacs

If Emacs is not installed on your system, you will need to get a source
code distribution and compile it yourself. Installing Emacs is not 
difficult. If Emacs is already installed on your GNU/Linux system, 
make sure that you do indeed have Emacs and not the Xemacs variant.
Also, make sure that you have version 20.3 or newer. Finally, there
are some variations in how Emacs can be installed. The installer can
choose whether or not they want to install support for multiple languages
and reading email over a POP server. It can be very useful to support both.
If the preinstalled version does not support either, then uninstall it and
reinstall Emacs from a source code distribution.

The emacs source code is distributed in three separate files:
@table @file
@item emacs-20.3.tar.gz
This is the main Emacs distribution. If you do not care about 
international language support, you can install this by itself.
@item leim-20.3.tar.gz
This supplements the Emacs distribution with support for multiple languages.
If you develop internationalized software, it is likely that you will need
this.
@item intlfonts-1.1.tar.gz
This file contains the fonts that Emacs uses to support international
languages. If you want international language support, you will 
definetely need this.
@end table
Get a copy of these files, place them under the same directory
and unpack them with the following commands:
@example
% gunzip emacs-20.3.tar.gz
% tar xf emacs-20.3.tar
% gunzip leim-20.3.tar.gz
% tar xf leim-20.3.tar
@end example
@noindent
Both tarballs will unpack under the @file{emacs-20.3} directory. When
this is finished, go in and compile the source code:
@example
% cd emasc-20.3
% ./configure --with-pop
% make
@end example
@noindent
This will take quite a while. When done, install Emacs with
@example
# make install
@end example
@noindent
To install @file{intlfonts-1.1.tar.gz} unpack it, and follow the instructions
in the @file{README} file.

@c ============================================================

@node Configuring GNU Emacs, Using Emacs, Installing GNU Emacs, Using GNU Emacs
@section Configuring GNU Emacs

To use Emacs effectively for software development you need to configure it.
Part of the configuration needs to be done in your X-resources file.
On a Debian GNU/Linux system, the X-resources can be configured by editing 
@example
/etc/X11/Xresources
@end example
@noindent
In many systems, you can configure X-resources by editing a file called
@file{.Xresources} or @file{.Xdefaults} on your home directory, but
that is system-dependent. The configuration that I use on my system
is:
@example
! Emacs defaults
emacs*Background: Black
emacs*Foreground: White
emacs*pointerColor: White
emacs*cursorColor: White
emacs*bitmapIcon: on
emacs*font: fixed
emacs*geometry: 80x40
@end example
@noindent
In general I favor dark backgrounds and @samp{fixed} fonts. Dark backgrounds
make it easier to sit in front of the monitor for a prolonged period of
time. @samp{fixed} fonts looks nice and it's small enough to make efficient
use of your screenspace. Some people might prefer larger fonts however.

The bulk of Emacs configuration is done by editing or creating an 
@file{.emacs} file
in your home directory. If you feel comfortable editing this file with the 
unconfigured Emacs editor, go for it. Alternatively, you can use the vanilla 
vi editor. (@pxref{Using vi emulation}). Here are some things that you
might want to add to your @file{.emacs} file:
@itemize @bullet
@item
You can override your X-default background and foreground color in your
@file{.emacs} file. For the sake of redundancy, if nothing else, 
add the following lines to your @file{.emacs}:
@example
(set-background-color "black")
(set-foreground-color "white")
@end example
@noindent
You can change the colors to your liking.
@item
In many circumstances, Emacs needs to know your name and email address.
For example, when you update a @file{ChangeLog}, Emacs needs to know
these two pieces of information to create a time-stamp. This information
is also needed when you use Emacs to browse the newsgroups or send email.
Usually, Emacs can guess this information from your password file and
if it can deduce your hostname and domain-name it can put together an
email address. Home systems, that connect to the internet over modem,
may not have a valid email address, and since we have root on these
systems, we like to call ourselves things like ``Skeletor'' or ``Dude'',
when people finger us, but not on our @file{ChangeLog} files or in our
emails to our boss. To give Emacs your official name and email address,
add the following two lines in your @file{.emacs} file:
@example
(setq user-mail-address "dude@@whitehouse.com")
(setq user-full-name "Karl Marx")
@end example
@noindent
Make sure the name is your real name, and the email address that you
include can receive email 24 hours per day.
@item
You can tell Emacs to display a little clock on each frame by adding
the following line in your @file{.emacs}:
@example
(display-time)
@end example
@noindent
You can also tell Emacs to show you the line and column number of your
cursor's position at all times by adding the following lines in your
@file{.emacs}
@example
(line-number-mode 1)
(column-number-mode 1)
@end example
@noindent
All of these features can be very convenient. 
@item
To cut and paste text from frame to frame, you can use the mouse.
Mouse button 1 will select text and mouse button 2 will paste the text.
Unfortunately, when you click mouse button 2, emacs will first move the
cursor at the location of the mouse, and insert the text in that location.
If you are used to editing with vi under xterms, you won't like this behaviour.
Instead, you will prefer to position the cursor yourself, and you will
want mouse button 2 to simply cause the text to be pasted without
changing the position of the cursor. If you prefer this behaviour,
add the following line to your @file{.emacs}:
@example
(global-set-key [mouse-2] 'yank)
@end example
By default, selected text in Emacs buffers is highlighted with blue color.
However, you can also select and paste into an Emacs buffer text that
you select from other applications, like your web browser, or your xterm.
@item
You may like to use @dfn{font-lock}.
Emacs understands to a great extent the syntax of your text, especially when
your text is source code, and it can mark differents parts of your text
with different colors depending on what the text means syntactically. 
For example, with C source code, comments are marked red, stuff in quotes
are marked brown and certain keywords are marked green, blue, etc.
To activate font-lock, add the following lines to your @file{.emacs}:
@example
(global-font-lock-mode t)
(setq font-lock-maximum-size nil)
@end example
@noindent
At first, fontlock might appear disconcerting to you. It only takes about
a day to get used to it, and then you won't be able to do without it. 
Not only does font-lock make your text look prettier. It can also help you
catch common mistakes like run-away C comments, stray quote marks and so on.
@item
To get rid of the scrollbar at the left of your Emacs window, type
@example
(setq scroll-bar-mode nil)
@end example
@noindent
The only reason that the scrollbar is default is to make Emacs more similar
to what lusers are used to. Most vi/xterm hackers will be glad to see 
the scrollbar go away.
@item
If you have installed Emacs packages in non-standard directories,
you need to add them to the @samp{load-path} variable. For example,
here's how to add a couple of directories:
@example
(setq load-path
      (append "/usr/share/emacs/site-lisp"
              "/usr/local/share/emacs/site-site"
              (expand-file-name "~lf/lisp")
              load-path))
@end example
@noindent
Note the use of @samp{expand-file-name} for dealing with non-absolute
directories. If you are a user in an account where you don't have root
priviledge, you are very likely to need to install your Emacs packages
in a non-standard directory.
@item
If you are a vi user, and you would like to run a vi editor under the
Emacs system, then read 
@ref{Using vi emulation}, for more details. 
@item
To manipulate multiple files effectively, we recommend some
additional configuration in @ref{Using Emacs}.
@item
Autotools distributes two Emacs packages. One for handling copyright notices
and another one for handling Texinfo documentation. 
To set these packages up read
@ref{Inserting copyright notices with Emacs}, and 
@ref{GNU Emacs support for Texinfo}.
@item
If you would like to use Emacs to read your email, then see
@ref{Using Emacs as an email client}, for more configuration information.
@end itemize
Emacs now has a graphical user interface to customization that will 
write @file{.emacs} for you automatically. To use it, select:
@example
Help -> Customize -> Browse Customization Groups
@end example
@noindent
from the menu bar. You can also manipulate some common settings from:
@example
Help -> Options
@end example
@noindent

@c ============================================================

@node Using Emacs, Using vi emulation, Configuring GNU Emacs, Using GNU Emacs
@section Using Emacs
 
To start Emacs type 
@example
% emacs &
@end example
@noindent
on your shell prompt. Usually, you want to start an Emacs session when you
log in and quit it when you log out. For this reason, you should 
set up your X configuration such that it starts Emacs when you log in. 
To quit Emacs press @kbd{C-x C-c}, or select 
@example
Files -> Exit Emacs
@end example
@noindent
from the menu. The notation @kbd{C-c} means @kbd{@key{CTRL}-c}. The 
separating dash @samp{-} means that you press the key after the dash while
holding down the key before the dash.

If you want to learn how to edit files using the standard Emacs 
@emph{editor}, then 
run the on-line Emacs tutorial. To start the on-line tutorial type
@kbd{C-h t} or select:
@example
Help -> Emacs Tutorial
@end example
@noindent
If you prefer to use `vi', then read @ref{Using vi emulation}.

Emacs works by running Lisp functions in response to your keystrokes, your
mouse and your menu selections. Some of these functions might decide to
hang, or they might start doing something that you want to stop. You
can @strong{always} abort
@footnote{Proposed Federal censorship regulations may prohibit us from giving you information about the possibility of aborting Emacs functions. We would be required to say that this is not an acceptable way of terminating an unwanted  function}
an Emacs function by pressing @kbd{C-g}. 

When you develop software, you need to edit a lot of files simultaneously.
You also need to maintain a log of your changes
and hop between the shell and editing. To orient Emacs towards this kind
of work, we recommend the following additional configuration:

First, add
@example
(add-hook 'dired-load-hook (function (lambda () (load "dired-x"))))
(setq dired-omit-files-p t)
@end example
@noindent
to activate extended features of @dfn{Dired}, the directory editor.
Then establish the following key-bindings in your @file{.emacs}:
@example
(global-set-key [f1] 'dired)
(global-set-key [f2] 'dired-omit-toggle)
(global-set-key [f3] 'shell)
(global-set-key [f4] 'find-file)
(global-set-key [f5] 'make-frame)
(global-set-key [f8] 'add-change-log-entry-other-window)
@end example
@noindent
Now you can use the function keys to navigate from file to file or
switch to the shell. 
@table @kbd
@item f1
Enters the directory editor. Use the cursor keys to move to the file that
you want. Press @key{ENTER} to select a file and start editing it.
@item f2
Toggle between omitting boring files, and not omitting them.
@item f3
Get a shell at the current window. To go back to the file you were
previously editing, press @kbd{f1} and then press @key{ENTER} repeatedly.
The default selections will lead you back to the file that you were editing.
@item f4
Takes you directly to the file that you want to edit without going through
the directory editor. If it is faster for you to type the filename than
to navigate the directory editor, you may want to do that instead.
@item f5
Creates another frame. When you first start Emacs, you should create
a few frames and move them around on your screen. We place this key on
@kbd{f5} because that keeps it away from the commonly used keys
@kbd{f1}, @kbd{f2}, @kbd{f3}, @kbd{f4}.
@item f8
Enter a @file{ChangeLog} entry for a file that you are currently
editing. @xref{Maintaining the documentation files}.
@end table
You can of course use different keys for these bindings. 
@xref{More about configuring Emacs}.

Every once in a while, a software developer will need counseling services.
In RL 
@footnote{RL is the designation of a parallel universe known to many as @dfn{Real Life}}
counseling is very expensive. In Emacs, you can get free counceling
by typing
@example
@key{ALT}-x doctor @key{ENTER}
@end example
@noindent
Many people could say that if hackers got out more often, they wouldn't need
counseling in the first place. It is true that going out for a walk is
a refreshing experience, however you might not want to do it in RL, to
avoid the people that make such snide remarks. So, if you really want to go
out for a very long walk, then type:
@example
@key{ALT}-x dunnet @key{ENTER}
@end example
@noindent
to enter a parallel universe that is accessible only through Emacs.

@c ============================================================

@node Using vi emulation, More about configuring Emacs, Using Emacs, Using GNU Emacs
@section Using vi emulation

Many hackers prefer to use the @samp{vi} editor. The @samp{vi} editor is
the standard editor on Unix. It is also always available on GNU/Linux.
Many system administrators find it necessary to use vi, especially when they
are in the middle of setting up a system in which Emacs has not been 
installed yet. Besides that, there are many compelling reasons why people 
like vi.
@itemize @bullet
@item
Vi requires only two special keys: the @key{SHIFT} key and the @key{ESC}
key. All the other keys that you need are standard on all keyboards. 
You do not need @key{CTRL},@key{ALT},the cursor keys or any of the function
keys. Some terminals that miss the escape key, usually have the control
key and you can get escape with: 
@kbd{@key{CTRL}-[} @c }
@item
Vi was designed to deal with terminals that connect to mainframes over
a very slow line. So it has been optimized to allow you to do the most
editing possible with the fewest keystrokes. This allows users to edit
text very efficiently.
@item
Vi allows your fingers to stay at the center of the keyboard, with the
occasional hop to the escape key. It does not require you to stretch your
fingers in funny control combinations, which makes typing less tiring
and more comfortable.
@end itemize
Because most rearrangements of finger habits are not as optimal as the
vi finger habits, most vi users react very unpleasently to other editors.
For the benefit of these users, in this section we describe how to 
run a vi editor under the Emacs system. Similarly, users of other editors
find the vi finger habits strange and unintuitive. For the benefit of 
these users we describe briefly how to use the vi editor, so they can
try it out if they like.

The vi emulation package for the Emacs system is called @dfn{Viper}. 
To use Viper, add the following lines in your @file{.emacs}:
@file{.emacs}:
@example
(setq viper-mode t)
(setq viper-inhibit-startup-message 't)
(setq viper-expert-level '3)
(require 'viper)
@end example
@noindent
We recommend expert level 3, as the most balanced blend
of the vi editor with the Emacs system. Most editing modes are aware of
Viper, and when you begin editing the text you are immediately thrown into
Viper. Some modes however do not do that. In some modes, like the Dired mode,
this is very appropriate. In other modes however, especially custom modes
that you have added to your system, Viper does not know about them, so
it does not configure them to enter Viper mode by default. To tell a
mode to enter Viper by default, add a line like the following to
your @file{.emacs} file:
@example
(add-hook 'm4-mode 'viper-mode)
@end example
@noindent
The modes that you are most likely to use during software development are
@example
c-mode  , c++-mode , texinfo-mode
sh-mode , m4-mode  , makefile-mode
@end example
@noindent
The Emacs distribution has a Viper manual. For more details on setting
Viper up, you should read that manual.

The vi editor has these things called @emph{editing modes}. An editing
mode defines how the editor responds to your keystrokes. Vi has three
editing modes: @dfn{insert mode}, @dfn{replace mode} and @dfn{command mode}. 
If you run Viper, there is also the Emacs mode. Emacs indicates which
mode you are in by showing one of
@samp{<I>}, @samp{<R>}, @samp{<V>}, @samp{<E>} on the statusbar 
correspondingly for the Insert, Replace, Command and Emacs modes.
Emacs also shows you the mode by the color of the cursor. This makes it
easy for you to keep track of which mode you are in.
@itemize @bullet
@item
@dfn{Insert mode}:
When you are in insert mode, the editor simply @dfn{inserts} the things that
you type into the text that is being editted. If there are any characters
in front of your cursor, these characters are pushed ahead and they are
not overwritten. Under Viper, when you are in insert mode, the color
of your cursor is green. The only key that has special meaning, while you
are in insert mode is @key{ESC}. If you press the escape key, you are taken
to @dfn{command mode}.
@item
@dfn{Replace mode}:
When you are in replace mode, the editor replaces the text under the cursor
with the text that is being typed. So, you want insert mode when you want
to write over what's already written. Under Viper, when you are in 
replace mode, the color of your cursor is red. The @key{ESC} will take you
to @dfn{command mode.}
@item
@dfn{Command mode}:
When you are in command mode, every letter key that you press is a command
and has a special meaning. Some of these keys allow you to navigate the
text. Other keys allow you to enter either insert or replace mode. 
And other keys do various special things. Under Viper, when you are in
command mode, the color of your cursor is white. 
@item
@dfn{Emacs mode}:
When you are in Emacs mode, then Viper is turned off on the specific 
buffer, and Emacs behaves as the default Emacs editor. 
You can switch between Emacs mode and Command mode by pressing
@kbd{@key{CTRL}-z}. So to go to Emacs mode, from Insert of Replace mode, you 
need to go through Command mode. When you are dealing with a buffer that
runs a special editing mode, like Dired,
Emacs defines a specialized ``command mode'' for manipulating that buffer,
that can be completely different from the canonical Viper command mode.
You want to be in that mode to access the intended functionality. Occasionally
however, you may like to hop to viper's command mode to navigate the buffer,
do a search or save the buffer's contents. When you hop to one of the 
other three modes, the buffer will suddendly be just text to your editor.
@end itemize
While you are in Command mode, you can prepend keystrokes with a number. 
Then the subsequent keystroke will be executed as many times as the number.
We now list the most important keystrokes that are available to you, 
while you are in Viper's command mode:
@itemize @bullet
@item
The following keystrokes allow you to navigate the cursor around your text
without making any changes on the text itself
@table @kbd
@item h
moves one character to the left
@item j 
moves down one line
@item k
moves up one line
@item l
moves one character to the left
@item w
moves forward one word
@item 5w
moves forward five words (get the idea?)
@item b
moves back one word
@item 0
moves to the beginning of the current line
@item $
moves to the end of the current line
@item G
moves to the last line in the file
@item 1G
moves to the first line in the file
@item :10
moves to line 10 in the file (get the idea?)
@item @{
moves up one paragraph
@item @}
moves down one paragraph
@end table
@item
The following keystrokes allow you to delete text
@table @kbd
@item x
Deletes the character under the cursor
@item dd
Deletes the current line
@item 4dd
Deletes four lines
@item dw
Deletes the current word
@item 8dw
Deletes the next eight words
@end table
@item
The following keystrokes allow you to enter Insert mode
@table @kbd
@item a
Append text after the cursor position
@item i
Insert text at the current cursor position
@item o
Insert text on a new line bellow the current line
@item O
Insert text on a new line above the current line
@end table
@item
The following keystrokes allow you to enter Replace mode.
@table @kbd
@item R
Replace text at the cursor position and stay in Replace mode.
@item s
Replace (substitute) only the character at the cursor position, and
enter Insert mode for all subsequent characters.
@end table
@item
The following commands handle file input/output. All of these commands
are prepended by the @kbd{:} character. The @kbd{:} character is used 
for commands that require many characters to be properly expressed. 
The full text of these commands is entered in the minibuffer. Under viper,
the minibuffer itself can run under insert, replace and command mode.
By default you get insert mode, but you can switch to command mode 
by pressing @key{ESC}.
@table @kbd
@item :w
Save the file to the disk
@item :w!
Force the file to be saved to disk even when file permissions do not allow
it but you have the power to overrule the permissions.
@item :w@key{SPACE}@var{filename}
Save the file to the disk under a specific filename. 
When you press @key{SPACE} Emacs inserts the full pathname of the current
directory for you, which you can edit if you like.
@item :w!@key{SPACE}@var{filename}
Force the file to be saved to the disk under a specific filename.
@item :r@key{SPACE}@var{filename}
Paste a file from the disk at the cursor's current position.
@item :W
Save all the files on all the Emacs buffers that correspond to open files.
@item :q
Kill the buffer. This does not quite the editor at expert level 3.
@item :q!
Kill the buffer even if the contents are not saved. Use with caution!
@end table
@item
The following commands handle search and replace
@table @kbd
@item /@var{string}
Search for @var{string}.
@item n
Go to the next occurance of @var{string}.
@item N
Go to the previous occurance of @var{string}.
@item :%s/@var{string1}/@var{string2}/g
Replace all occurances of @var{string1} with @var{string2}.
Use this with extreme caution!
@end table
@item
The following commands handle @dfn{undo}
@table @kbd
@item u
Undo the previous change. Press again to undo the undo
@item .
Press this if you want to repeat the undo further.
@end table
@end itemize
These are enough to get you started. Getting used to dealing with the modes
and learning the commands is a matter of building finger habits. It may take
you a week or two before you become comfortable with Viper. When Viper
becomes second nature to you however, you won't want to tolerate what you
used to use before.

@c ============================================================

@node More about configuring Emacs, Inserting copyright notices with Emacs, Using vi emulation, Using GNU Emacs
@section More about configuring Emacs

In Emacs, every @dfn{event} causes a Lisp function to executed. An @dfn{event}
can be any keystroke, mouse movement, mouse clicking, or a menu bar selection.
The function implements the appropriate response to the event. 
Some of the functions are called @dfn{interactive} because they can be run 
directly by the user by typing:
@example
@key{ALT}-x @var{function-name} @key{ENTER}
@end example
@noindent
Any Emacs function, once it starts running, can be aborted with @kbd{C-g}.

It is standard in Emacs documentation to refer to the @key{ALT} key with
the letter @samp{M}. So, in the future, we will be refering to function
invokations as:
@example
M-x @var{function-name}
@end example
@noindent

Emacs functionality is implemented in an @dfn{event-driven} fashion.
The Emacs developer writes Lisp functions that implement functionality,
and then these functions are bound to events. These table bindings
are called @dfn{keymaps}. 

Emacs has a @dfn{global keymap}, which is in effect
at all times, and then it has specialized keymaps depending on what
@dfn{editing mode} you use. Editing modes are selected when you visit a
file depending on the name of the file. So, for example, if you visit a
C file, Emacs goes into the C mode. If you visit @file{Makefile}, Emacs
goes into makefile mode. 

You can also enter a mode by run the Emacs function that initializes the mode.
Here are the most commonly used modes:
@table @code
@item M-x c-mode
Mode for editing C programs according to the GNU coding standards.
@item M-x c++-mode
Mode for editing C++ programs
@item M-x sh-mode
Mode for editing shell scripts.
@item M-x m4-mode 
Mode for editing Autoconf macros.
@item M-x texinfo-mode
Mode for editing documentation written in the Texinfo formatting language.
@xref{Introduction to Texinfo}.
@item M-x makefile-mode
Mode for editing makefiles.
@end table
With most versions of Emacs you will have to add the following to your
@file{.emacs} to make
sure that editing @file{configure.in} takes you to @code{m4-mode} and
editing @file{Makefile.am} takes you to @code{makefile-mode}:
@example
(setq auto-mode-alist
  (append '(
    ("configure.in" . m4-mode)
    ("\\.m4\\'" . m4-mode)
    ("\\.am\\'" . makefile-mode))
   auto-mode-alist))
@end example
@noindent
As a user you shouldn't have to worry too much about the modes. The defaults
do the right thing. However, you might want to enhance Emacs to suit your
needs better. 

Here are some ways in which you can further configure Emacs:
@enumerate
@item
A common change to the standard configuration is
assigning @dfn{global variables} to non-default
values. This is done with the @samp{setq} command, which accepts the
following syntax:
@example
(setq @var{variable} @var{value})
@end example
@noindent
For example:
@example
(setq viper-mode t)
@end example
@noindent
You can access on-line documentation for global variables by running:
@example
M-x describe-variable
@end example
@noindent

@item
In some cases, Emacs depends on the values of shell 
@dfn{environment variables}. These can be manipulated with @samp{setenv}:
@example
(setenv "@var{variable}" "@var{value}")
@end example
@noindent
For example:
@example
(setenv "INFOPATH" "/usr/info:/usr/local/info")
@end example
@noindent
@samp{setenv} does not affect the shell that invoked Emacs, but it does
affect Emacs itself, and shells that are run under Emacs.

@item
The easier way to enhance your Emacs configuration is by modifying the
global keymap. This can be done with the @samp{global-set-key} command,
which follows the following syntax:
@example
(global-set-key [@var{key sequence}] '@var{function})
@end example
@noindent
For example, adding:
@example
(global-set-key [F12 d] 'doctor)
@end example
@noindent
to @file{.emacs} makes the key sequence @kbd{F12 d} equivalent to
running @samp{M-x doctor}. Emacs has many functions that provide all
sorts of functionality. To find out about specific functions, consult
the @cite{Emacs user manual}. Once you know that a function exists,
you can also get on-line documentation for it by running:
@example
M-x describe-function
@end example
@noindent
You can also write your own functions in Emacs Lisp. To learn the
Emacs Lisp language read the
@cite{GNU Emacs Lisp Reference Manual}. To read about how the GNU 
development tools can help you create source code distributions of Emacs
Lisp read @ref{Emacs Lisp with Automake}.

@item
It is not always good to introduce bindings to the global map. Any bindings
that are useful only within a certain mode should be added only to the local
keymap of thet mode. Consider for example the following Emacs Lisp function:
@example
(defun texi-insert-@@example ()
  "Insert an @@example @@end example block"
  (interactive)
  (beginning-of-line)
  (insert "@@example\n")
  (save-excursion 
    (insert "\n")
    (insert "@@end example\n")
    (insert "@@noindent\n")))
@end example
@noindent
We would like to bind this function to the key @samp{F9}, however we
would like this binding to be in effect only when we are within 
@samp{texinfo-mode}. To do that, first we must define a hook function
that establishes the local bindings using @samp{define-key}:
@example
(defun texinfo-elef-hook ()
  (define-key texinfo-mode-map [F9] 'texi-insert-@@example))
@end example
@noindent
The syntax of @samp{define-key} is similar to @samp{global-set-key}
except it takes the name of the local keymap as an additional 
argument. The local keymap of any @samp{@var{name}-mode} is 
@samp{@var{name}-mode-map}. Finally, we must ask @samp{texinfo-mode}
to call the function @samp{texinfo-elef-hook}. To do that use the
@samp{add-hook} command:
@example
(add-hook 'texinfo-mode-hook 'texinfo-elef-hook)
@end example
@noindent
In some cases, Emacs itself will provide you with a few optional hooks
that you can attach to your modes.
@end enumerate

In general, if you want to do any kind of complicated customization,
you need to learn Emacs Lisp. 

@c =============================================================

@node Inserting copyright notices with Emacs, Using Emacs as an email client, More about configuring Emacs, Using GNU Emacs
@section Inserting copyright notices with Emacs

When you develop free software, you must place copyright notices at
every file that invokes the General Public License. If you don't place
any notice whatsoever, then the legal meaning is that you refuse 
to give any permissions whatsoever, and the software consequently is not
free. For more details see @ref{Freeing your software}. 
Many hackers, who don't take the law seriously, complain that adding the
copyright notices takes too much typing. Some of these people live in
countries where copyright is not really enforced. Others simply ignore it.

There is an Emacs package, called @samp{gpl}, which is currently distributed
with Autotools, that makes it possible to insert and maintain copyright
notices with minimal work. To use this package, 
in your @file{.emacs} you must declare your identity
by adding the following commands:
@example
(setq user-mail-address "me@@here.com")
(setq user-full-name "My Name")
@end example
@noindent
Then you must require the packages to be loaded:
@example
(require 'gpl)
(require 'gpl-copying)
@end example
@noindent
This package introduces the following commands:
@table @code
@item gpl
Insert the standard GPL copyright notice using appropriate commenting.
@item gpl-fsf
Toggle FSF mode. Causes the @code{gpl} command to insert a GPL
notice for software that is assigned to the Free Software Foundation.
The @code{gpl} command autodetects what type of file you are editing,
from the filename, and uses the appropriate commenting.
@item gpl-personal
Toggle personal mode. Causes the @code{gpl} command to insert a
GPL notice for software in which you keep the copyright.
@end table
If you are routinely assigning your software to an organization other
than the Free Software Foundation, then insert:
@example
(setq gpl-organization "@var{name}")
@end example
@noindent
after the @samp{require} statements in your @file{.emacs}.

@c ==============================================================

@node Using Emacs as an email client, Handling patches, Inserting copyright notices with Emacs, Using GNU Emacs
@section Using Emacs as an email client

@c ===============================================================

@node Handling patches, Further reading on Emacs, Using Emacs as an email client, Using GNU Emacs
@section Handling patches

@c ================================================================

@node Further reading on Emacs,  , Handling patches, Using GNU Emacs
@section Further reading on Emacs

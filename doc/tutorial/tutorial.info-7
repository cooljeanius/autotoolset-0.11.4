This is tutorial.info, produced by makeinfo version 4.3 from
tutorial.texi.

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* Autotoolset Tutorial: (tutorial).        Autotools tutorial.
END-INFO-DIR-ENTRY


File: tutorial.info,  Node: Maintaining Documentation,  Next: Legal issues with Free Software,  Prev: Fortran with Autoconf,  Up: Top

Maintaining Documentation
*************************

* Menu:

* Writing proper manuals::
* Introduction to Texinfo::
* Markup in Texinfo::
* GNU Emacs support for Texinfo::
* Writing documentation with LaTeX::
* Creating a LaTeX package::
* Further reading about LaTeX::


File: tutorial.info,  Node: Writing proper manuals,  Next: Introduction to Texinfo,  Prev: Maintaining Documentation,  Up: Maintaining Documentation

Writing proper manuals
======================

   _FIXME: Advice on how to write a good manual_ _General stuff.
Reference manual vs user manual._ _When to write a manual._ _How to
structure a manual._ _Texinfo vs. Latex_ _Copyright issues._


File: tutorial.info,  Node: Introduction to Texinfo,  Next: Markup in Texinfo,  Prev: Writing proper manuals,  Up: Maintaining Documentation

Introduction to Texinfo
=======================


File: tutorial.info,  Node: Markup in Texinfo,  Next: GNU Emacs support for Texinfo,  Prev: Introduction to Texinfo,  Up: Maintaining Documentation

Markup in Texinfo
=================


File: tutorial.info,  Node: GNU Emacs support for Texinfo,  Next: Writing documentation with LaTeX,  Prev: Markup in Texinfo,  Up: Maintaining Documentation

GNU Emacs support for Texinfo
=============================


File: tutorial.info,  Node: Writing documentation with LaTeX,  Next: Creating a LaTeX package,  Prev: GNU Emacs support for Texinfo,  Up: Maintaining Documentation

Writing documentation with LaTeX
================================


File: tutorial.info,  Node: Creating a LaTeX package,  Next: Further reading about LaTeX,  Prev: Writing documentation with LaTeX,  Up: Maintaining Documentation

Creating a LaTeX package
========================


File: tutorial.info,  Node: Further reading about LaTeX,  Prev: Creating a LaTeX package,  Up: Maintaining Documentation

Further reading about LaTeX
===========================

   The appendices


File: tutorial.info,  Node: Legal issues with Free Software,  Next: Philosophical issues,  Prev: Maintaining Documentation,  Up: Top

Legal issues with Free Software
*******************************

* Menu:

* Understanding Copyright::
* Other legal concerns::
* Freeing your software::


File: tutorial.info,  Node: Understanding Copyright,  Next: Other legal concerns,  Prev: Legal issues with Free Software,  Up: Legal issues with Free Software

Understanding Copyright
=======================

   If you are just writing your own programs for your own internal use
and you don't plan to redistribute them, you don't really need to worry
too much about copyright. However, if you want to give your programs to
other people or use programs that were written by other people then
copyright issues become relavant.  The main reason why `autoconf' and
`automake' were developed was to facilitate the distribution of source
code for the GNU project by making packages autoconfiguring. So, if you
want to use these tools, you probably also want to know something about
copyright issues. The following sections will focus primarily on the
legal issues surrounding software. For a discussion of the
philosophical issues please see *Note Philosophical issues::.  At this
point, I should point out that *I am not a lawyer, this is not legal
advice, and I do not represent the opinions of the Free Software
Foundation*.

   When you create an original work, like a computer program, or a
novel, and so on, the government automatically grants you a set of
legal rights called "copyright".  This means that you have the right to
forbid others to _use_, _modify_ and _redistribute_ your work. By
default, you have the _exclusive_ right to do these things, and anyone
that would like to use, modify or redistribute you work needs to enter
an agreement with you. The government grants you this monopoly and
limits the freedom of the public because, it is believed, that it will
encourage the creation of more works.

   Copyright is transferable. This means that you have the right to
transfer most your rights, that we call "copyright", to another person
or organization. When a work is being developed by a team, it makes
legal sense to transfer the copyright to a single organization that can
then coordinate enforcement of the copyright. In the free software
community, some people assign their software to the Free Software
Foundation.  The arrangement is that copyright is transfered to the
FSF. The FSF then grants you all the rights back in the form of a
license agreement, and commits itself legally to distributing the work
only as free software.  If you want to do this, you should contact the
FSF for more information.  It is not a good idea to assign your
copyright to anyone else, unless you know what you are getting into. By
assigning you rights to someone and not getting any of those rights
back in the form of an agreement, you may place yourself in a position
where you are not allowed to use your own work.  Unfortunately, if you
are employed or a student in a University you have probably already
signed many of your rights away. Universities as well as companies like
to lay as much claim on any copyrightable work you produce as possible,
even work that you do as a hobby that has nothing to do with them.

   Copyright covers mainly original works. However it also covers
"derived works". If you grant permission to someone to modify your
code, and person goes ahead and produces a modified version, then that
version is "derived work" and legally the owner of that version is
still you. Similarly, if you write a library and person writes a
program that links against your library, then the executable is derived
work of both the library and the portion that person wrote. As a result,
person can only distribute the executable under terms that are
consistent with the terms of the library that it is based on.

   The concept of derived work is actually very slippery ground.  The
key to understanding it is that copyright law covers implementations
and not algorithms. This means that if you take someone's code, fire up
an editor and modiy it, then the result is derived work. If someone
else takes the code, writes up an essay describing what it does, gives
you the essay and you go ahead and rewrite the code from scratch, then
it is *not* derived work. In fact it will *not* be derived work, even
if by some stroke of luck, the two works are identical, if you can
prove to the court that you wrote your version completely from scratch.

   Because copyright law is by default restrictive, you must explicitly
grant permissions to your users to enable them to use your work when you
give them a copy. One way of doing it is by simply granting them
permissions, which can be conditional on certain requirements. In the
free software community, we standardize on using a legal document, the
"General Public License" to grant such permissions.


File: tutorial.info,  Node: Other legal concerns,  Next: Freeing your software,  Prev: Understanding Copyright,  Up: Legal issues with Free Software

Other legal concerns
====================

   In addition to copyright law, there is another legal beast: the
patent law.  Unlike copyright, which you own automatically by the act
of creating the work, you don't get a patent unless you file an
application for it. If approved, the work is published but others must
pay you royalties in order to use it in any way.

   The problem with patents is that they cover algorithms, and if an
algorithm is patented you can't write an implementation for it without
a license. What makes it worse is that it is very difficult and
expensive to find out whether the algorithms that you use are patented
or will be patented in the future. What makes it insane is that the
patent office, in its infinite stupidity, has patented algorithms that
are very trivial with nothing innovative about them. For example, the
use of "backing store" in a multiprocesing window system, like X11, is
covered by patent 4,555,775. In the spring of 1991, the owner of the
patent, AT&T, threatened to sue every member of the X Consortium
including MIT. Backing store is the idea that the windowing system save
the contents of all windows at all times. This way, when a window is
covered by another window and then exposed again, it is redrawn by the
windowing system, and not the code responsible for the application.
Other insane patents include the IBM patent 4,674,040 which covers "cut
and paste between files" in a text editor. Recently, a Microsoft backed
company called "Wang" took Netscape to court over a patent that covered
"bookmarks"! Wang lost.  Although most of these patents don't stand a
chance in court, the cost of litigation is sufficient to terrorize
small bussinesses, non-profit organizations like the Free Software
Foundation, as well as individual software developers.

   Companies like to use software patents as strategic weapons. They
build an arsenal of software patents by trying to pass whatever can get
through the Patent Office. Then years later, when another company
threatens their interest, they can go through their patent arsenal and
sue the other company. So far there have been no patent attacks aimed
directly against the free software community. On November of 1998
however two internal memos were leaked from Microsoft about our
community. According to these memos, Microsoft perceives the free
software community as a competitor and they seem to consider a
patent-based attack among other things.  We live in interesting times.

   An additional legal burden to both copyrights and patents is
governmental paranoia over encryption algorithms. According to the US
government, a computer program implementing an encryption algorithm is
considered munition, therefore export-control laws on munitions apply.
What is not allowed under these laws is to export the software outside
the borders of the US. The government is pushing the issue by claiming
that making encryption software available on the internet is the same
thing as exporting it. Zimmermann, the author of a popular encryption
program, was sued by the government based on this interpretation of the
law.  However the government's position was not tested at court because
the government decided to drop the charges, after dragging the case for
a few years, long enough to send a message of terror to the internet
community.  The current wisdom seems to be that it is okey to make
encryption software available on the net provided that you take strong
measures that will prevent foreigners to download your work. It should
be noted however that doing so still _is_ taking a legal risk that
could land you to federal prison in the company of illegal arms dealers.

   It is quite obvious that the government's attitude towards
encryption is completely unconstitutional because it violates our
inalienable right to freedom of speech. Appearently, it is the current
policy of the government that publishing a book that contains the
source code for encryption software is legal, but publishing the same
content electronically is illegal. The reason why the government
maintains such a strange position is because in the past they have tried
to suppress even the publication of encryption algorithms in books.
When the RSA algorithm was discovered, the NSA attempted to prevent the
inventors from publishing their discovery in journals and presenting it
at conferences.  Judges understand books and conferences, so the
government has given up fighting that battle. They still haven't given
up on the electronic front however.

   Other countries also have restrictive laws against encryption. In
certain places you may not be even allowed to run such programs. The
reason why governments are so paranoid of encryption is because it is
the key to a wide array of technologies that empower the individual
citizens to circumvent governmental snooping on their privacy. The US
export laws however hurt US bussiness interests, and they are pointless
since good encryption software _is_ available on the internet from other
countries.


File: tutorial.info,  Node: Freeing your software,  Prev: Other legal concerns,  Up: Legal issues with Free Software

Freeing your software
=====================

   Both copyright and patent laws are being used mainly to destroy our
"freedom" to cooperate with our fellow hackers.  By freedom we refer to
three things: the freedom to use software, the freedom to modify it and
improve it, and the freedom to redistribute it with the modifications
and improvements so that the whole community benefits. Combined with
the possible default assignment of your rights to an employer or
university, the laws can actually interfere even with your ability to
write computer programs for a hobby and cooperate with other hackers on
that basis!

   To defend our freedoms from those who would like to take them from
us, the free software community uses the General Public License, also
known as the GPL. In broads strokes, the GPL does the following:
   * Grants you unrestricted permission to run the software and
     maintain as many copies as you like. You can also make personal
     custom modifications and use them freely. The GNU GPL does not
     restrict what you do in the privacy of your own computer in any
     way. On the contrary it waives all the restrictions that the
     copyright law applies to private use.  It only kicks in when you
     distribute the software you have received to other people.

   * Grants permission to redistribute the software or modified
     versions (derived work) provided that you do so *only* under the
     terms of the GNU public license. This means that if you make any
     changes, they must also be free. This protects the freedom of the
     package by forbidding someone to make a free version proprietary.
     This measure is called "copyleft" because it subverts the
     copyright law to do the opposite of what copyright is normally
     used for (i.e. to prevent a user to make a proprietary package
     free). The GNU GPL does not oblidge you to distribute your
     modifications. It only requires that you distribute them freely,
     _if_ you choose to distribute them at all. The decision of whether
     or not to distribute your derived work is entirely up to you.  The
     freedom to choose _not_ to distribute your modifications is as
     important as the freedom to distribute them. The GPL grants you
     both freedoms.

   * Disclaims all warranty to protect the authors from lawsuits,
     including various implied warranties such as the warranty for
     "merchantability" and "fitness for a particular purpose".

   * Protects the software's freedom from patents as much as this is
     possible.  The scenario that we want to avoid is someone receiving
     the source code, and then filing a patent application for the
     algorithms it uses, effectively making the software proprietary.
     If you do that, the GPL will forbid you from redistributing the
     software as well as derived work. So you will not want to do it.
     The patent law itself will prevent someone else, who distributes a
     competing product, to patent the algorithm if your implementation
     predates his.

   The purpose of the GPL is to use the copyright law to encourage a
world in which software is not copyrighted. If copyright didn't cover
software, then we would all be free to use, modify and redistribute
software, _and_ we would not be able to restrict others from enjoying
these freedoms because there would be no law giving anyone such power.
One way to grant the freedoms to the users of your software is to
revoke your copyright on the software completely. This is called putting
your work in the "public domain". The problem with this is that it only
grants the freedoms. It does not create the reality in which no-one can
take these freedoms away from derived works. In fact the copyright law
covers by default derived works regardless of whether the original was
public domain or copyrighted. By distributing your work under the GPL,
you grant the same freedoms, and at the same time you protect these
freedoms from hoarders.

   The GNU GPL is a legal instrument that has been designed to create a
safe haven in which software can be written free from copyright law
encumberence. It allows developers to freely share their work with a
friendly community that is also willing to share theirs, and at the
same time protect them from being exploited by publishers of proprietary
software. Many developers would not contribute to our community without
this protection.

   To apply the GPL to your programs you need to do the following
things:
   * Attach a copy of the GNU public license to the toplevel directory
     of your source code in a file called `COPYING'.

   * Include a legal notice to _every_ file that you want covered by
     the GPL, saying that it is covered by the GPL. It is important
     that all files that constitute source code must include this
     notice, including `Makefile.am', `configure.in' files and shell
     scripts.  The legal notice should look like this:
          // Copyright (C) (years) (Your Name) <your@email.address>
          //
          // This program is free software; you can redistribute it and/or
          // modify it under the terms of the GNU General Public License
          // as published by the Free Software Foundation; either
          // version 2 of the License, or (at your option) any later
          // version.
          //
          // This program is distributed in the hope that it will be useful,
          // but WITHOUT ANY WARRANTY; without even the implied warranty of
          // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
          // GNU General Public License for more details.
          //
          // You should have received a copy of the GNU General Public License
          // along with this program; if not, write to the Free Software
          // Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

     If you have assigned your copyright to an organization, like the
     Free Software Foundation, then you should probably fashion your
     copyright notice like this:
          // Copyright (C) (years) Free Software Foundation
          // (your name) <your@email.address> (initial year)
          // etc...

     This legal notice works like a subroutine. By invoking it, you
     invoke the full text of the GNU General Public License which is
     too lengthy to include in every source file. Where you see
     `(years)' you need to list all the years in which you finished
     preparing a version that was actually released, and which was an
     ancestor to the current version. This list is _not_ the list of
     years in which versions were released. It is a list of years in
     which versions, later released, were completed. If you finish a
     version on Dec 31, 1997 and release it on Jan 1, 1998, you need to
     include 1997, but you do not need to include 1998. This rule is
     complicated, but it is dictated by international copyright law.

   * Use the `AUTHORS' file to keep records of who wrote what. These
     records will be important if you decide at some point to register
     your copyright. They are also important if you plan to assign your
     work to the FSF, because they will want to register the copyright.
     We discuss this in more detail later.

   * If you modify someone else's GPL covered file make sure to comply
     with section 2 of the GPL. To do that place notices stating that
     you changed the file and the date of the change. Also your program
     should advertise the fact that it is free software, that there is
     no warranty and that it can be redistributed under the condition
     of the GPL. A standard way of doing this is to make your program
     output this notice when it is passed the `--version' command-line
     flag. For details please read the GPL.

   If you are unfamiliar with all this legalese you may find it
surprising; you might even find it stupid. This is a very natural
reaction. Until 1980, software copyright was not taken seriously in the
US. In fact copyrights then had to be registered in order to be valid,
and it was very natural for people to just copy software around, even
though they knew it was illegal. It took significant amounts of
lobbying and propaganda by proprietary publishers to cultivate the
current litigious paranoia over copyrights and "convince" the public
that helping out their neighbour by giving them an unauthorized copy is
not only illegal, but it also "morally wrong". Even though copyright
laws are international, through treaties, there are many countries in
the world, where this brainwashing hasn't yet taken place, and where
people still make unauthorized copies of software for their friends
with no second thoughts. Such people are being described with smear
words like "pirates" by publishers and their lawyers, but it is not
true that these people do what they do because of a malicious intent.
These people do what they do, because it is natural for them to be nice
and help their friends.

   One problem with this attitude is that many of us don't want to
disobey the law, because copyright is an indiscriminate weapon that
cuts both ways.  We prefer therefore to beat the hoarders at their own
game. This means that we can not use, modify or distribute programs
that are not distributed with a copyright notice and appropriate
permissions, because the default status of such programs is that _no
permissions are granted whatsoever_.  If you write a program that you
want to share with other people, then please apply the terms of the GPL
to the copies that you distribute, so that your friends can use, modify
and share the program with their friends, without breaking any laws and
to protect your contribution to our community from the hoarders. Please
do not violate copyright law.  Instead, say no to proprietary software
and use free software on the free GNU/Linux operating system.


File: tutorial.info,  Node: Philosophical issues,  Prev: Legal issues with Free Software,  Up: Top

Philosophical issues
********************

   The GNU development tools were written primarily to aid the
development of "free software". The free software movement was born by
important philosophical concerns, and it is these concerns that motivate
many software developers to contribute their code to our community.  In
this appendix we include a few articles written by Richard Stallman that
discuss these concerns. The text of these articles is copyrighted and
included here with permission from the following terms:

   *Copying Notice*
     Copyright (C) 1998 Free Software Foundation Inc
     59 Temple Place, Suite 330, Boston, MA 02111, USA
     Verbatim copying and distribution is permitted in any medium,
     provided this notice is preserved.

   All of these articles, and others are distributed on the web at:
`http://www.gnu.org/philosophy/index.html'

* Menu:

* Why software should not have owners::
* Why free software needs free documentation::
* Copyleft; Pragmatic Idealism::
* The X Windows Trap::
* Categories of software::
* Confusing words::


File: tutorial.info,  Node: Why software should not have owners,  Next: Why free software needs free documentation,  Prev: Philosophical issues,  Up: Philosophical issues

Why software should not have owners
===================================

   Digital information technology contributes to the world by making it
easier to copy and modify information. Computers promise to make this
easier for all of us.

   Not everyone wants it to be easier. The system of copyright gives
software programs "owners", most of whom aim to withhold software's
potential benefit from the rest of the public.  They would like to be
the only ones who can copy and modify the software that we use.

   The copyright system grew up with printing--a technology for mass
production copying. Copyright fit in well with this technology because
it restricted only the mass producers of copies. It did not take
freedom away from readers of books. An ordinary reader, who did not own
a printing press, could copy books only with pen and ink, and few
readers were sued for that.

   Digital technology is more flexible than the printing press: when
information has digital form, you can easily copy it to share it with
others. This very flexibility makes a bad fit with a system like
copyright. That's the reason for the increasingly nasty and draconian
measures now used to enforce software copyright.  Consider these four
practices of the Software Publishers Association (SPA):

   * Massive propaganda saying it is wrong to disobey the owners to
     help your friend.

   * Solicitation for stool pigeons to inform on their coworkers and
     colleagues.

   * Raids (with police help) on offices and schools, in which people
     are told they must prove they are innocent of illegal copying.

   * Prosecution (by the US government, at the SPA's request) of people
     such as MIT's David LaMacchia, not for copying software (he is not
     accused of copying any), but merely for leaving copying facilities
     unguarded and failing to censor their use.

   All four practices resemble those used in the former Soviet Union,
where every copying machine had a guard to prevent forbidden copying,
and where individuals had to copy information secretly and pass it from
hand to hand as "samizdat". There is of course a difference: the motive
for information control in the Soviet Union was political; in the US
the motive is profit. But it is the actions that affect us, not the
motive. Any attempt to block the sharing of information, no matter why,
leads to the same methods and the same harshness.

   Owners make several kinds of arguments for giving them the power to
control how we use information:
   * *Name calling*: Owners use smear words such as "piracy" and
     "theft", as well as expert terminology such as "intellectual
     property" and "damage", to suggest a certain line of thinking to
     the public--a simplistic analogy between programs and physical
     objects.

     Our ideas and intuitions about property for material objects are
     about whether it is right to _take an object away_ from someone
     else. They don't directly apply to _making a copy_ of something.
     But the owners ask us to apply them anyway.

   * *Exaggeration*: Owners say that they suffer "harm" or "economic
     loss" when users copy programs themselves. But the copying has no
     direct effect on the owner, and it harms no one. The owner can
     lose only if the person who made the copy would otherwise have
     paid for one from the owner.

     A little thought shows that most such people would not have bought
     copies. Yet the owners compute their "losses" as if each and every
     one would have bought a copy. That is exaggeration--to put it
     kindly.

   * *The law*: Owners often describe the current state of the law, and
     the harsh penalties they can threaten us with. Implicit in this
     approach is the suggestion that today's law reflects an
     unquestionable view of morality--yet at the same time, we are
     urged to regard these penalties as facts of nature that can't be
     blamed on anyone.

     This line of persuasion isn't designed to stand up to critical
     thinking; it's intended to reinforce a habitual mental pathway.

     It's elementary that laws don't decide right and wrong.  Every
     American should know that, forty years ago, it was against the law
     in many states for a black person to sit in the front of a bus;
     but only racists would say sitting there was wrong.

   * *Natural rights*: Authors often claim a special connection with
     programs they have written, and go on to assert that, as a result,
     their desires and interests concerning the program simply outweigh
     those of anyone else--or even those of the whole rest of the
     world. (Typically companies, not authors, hold the copyrights on
     software, but we are expected to ignore this discrepancy.)

     To those who propose this as an ethical axiom--the author is more
     important than you--I can only say that I, a notable software
     author myself, call it bunk.

     But people in general are only likely to feel any sympathy with
     the natural rights claims for two reasons.

     One reason is an overstretched analogy with material objects. When
     I cook spaghetti, I do object if someone else eats it, because
     then I cannot eat it. His action hurts me exactly as much as it
     benefits him; only one of us can eat the spaghetti, so the
     question is, which? The smallest distinction between us is enough
     to tip the ethical balance.

     But whether you run or change a program I wrote affects you
     directly and me only indirectly. Whether you give a copy to your
     friend affects you and your friend much more than it affects me. I
     shouldn't have the power to tell you not to do these things. No
     one should.

     The second reason is that people have been told that natural
     rights for authors is the accepted and unquestioned tradition of
     our society.

     As a matter of history, the opposite is true. The idea of natural
     rights of authors was proposed and decisively rejected when the US
     Constitution was drawn up. That's why the Constitution only
     permits a system of copyright and does not require one; that's why
     it says that copyright must be temporary. It also states that the
     purpose of copyright is to promote progress--not to reward
     authors. Copyright does reward authors somewhat, and publishers
     more, but that is intended as a means of modifying their behavior.

     The real established tradition of our society is that copyright
     cuts into the natural rights of the public--and that this can only
     be justified for the public's sake.

   * *Economics* The final argument made for having owners of software
     is that this leads to production of more software.

     Unlike the others, this argument at least takes a legitimate
     approach to the subject. It is based on a valid goal--satisfying
     the users of software. And it is empirically clear that people
     will produce more of something if they are well paid for doing so.

     But the economic argument has a flaw: it is based on the
     assumption that the difference is only a matter of how much money
     we have to pay. It assumes that "production of software" is what
     we want, whether the software has owners or not.

     People readily accept this assumption because it accords with our
     experiences with material objects.  Consider a sandwich, for
     instance. You might well be able to get an equivalent sandwich
     either free or for a price. If so, the amount you pay is the only
     difference.  Whether or not you have to buy it, the sandwich has
     the same taste, the same nutritional value, and in either case you
     can only eat it once. Whether you get the sandwich from an owner
     or not cannot directly affect anything but the amount of money you
     have afterwards.

     This is true for any kind of material object--whether or not it
     has an owner does not directly affect what it is, or what you can
     do with it if you acquire it.

     But if a program has an owner, this very much affects what it is,
     and what you can do with a copy if you buy one. The difference is
     not just a matter of money. The system of owners of software
     encourages software owners to produce something--but not what
     society really needs. And it causes intangible ethical pollution
     that affects us all.

     What does society need? It needs information that is truly
     available to its citizens--for example, programs that people can
     read, fix, adapt, and improve, not just operate. But what software
     owners typically deliver is a black box that we can't study or
     change.

     Society also needs freedom. When a program has an owner, the users
     lose freedom to control part of their own lives.

     And above all society needs to encourage the spirit of voluntary
     cooperation in its citizens. When software owners tell us that
     helping our neighbors in a natural way is "piracy", they pollute
     our society's civic spirit.

     This is why we say that free software is a matter of freedom, not
     price.

     The economic argument for owners is erroneous, but the economic
     issue is real. Some people write useful software for the pleasure
     of writing it or for admiration and love; but if we want more
     software than those people write, we need to raise funds.

     For ten years now, free software developers have tried various
     methods of finding funds, with some success.  There's no need to
     make anyone rich; the median US family income, around $35k, proves
     to be enough incentive for many jobs that are less satisfying than
     programming.

     For years, until a fellowship made it unnecessary, I made a living
     from custom enhancements of the free software I had written. Each
     enhancement was added to the standard released version and thus
     eventually became available to the general public. Clients paid me
     so that I would work on the enhancements they wanted, rather than
     on the features I would otherwise have considered highest priority.

     The Free Software Foundation (FSF), a tax-exempt charity for free
     software development, raises funds by selling GNU CD-ROMs,
     T-shirts, manuals, and deluxe distributions, (all of which users
     are free to copy and change), as well as from donations. It now
     has a staff of five programmers, plus three employees who handle
     mail orders.

     Some free software developers make money by selling support
     services. Cygnus Support, with around 50 employees [when this
     article was written], estimates that about 15 per cent of its
     staff activity is free software development--a respectable
     percentage for a software company.

     Companies including Intel, Motorola, Texas Instruments and Analog
     Devices have combined to fund the continued development of the
     free GNU compiler for the language C. Meanwhile, the GNU compiler
     for the Ada language is being funded by the US Air Force, which
     believes this is the most cost-effective way to get a high quality
     compiler. [Air Force funding ended some time ago; the GNU Ada
     Compiler is now in service, and its maintenance is funded
     commercially.]

     All these examples are small; the free software movement is still
     small, and still young. But the example of listener-supported
     radio in this country [the US] shows it's possible to support a
     large activity without forcing each user to pay.

   As a computer user today, you may find yourself using a proprietary
program. If your friend asks to make a copy, it would be wrong to
refuse. Cooperation is more important than copyright. But underground,
closet cooperation does not make for a good society. A person should
aspire to live an upright life openly with pride, and this means saying
"No" to proprietary software.

   You deserve to be able to cooperate openly and freely with other
people who use software. You deserve to be able to learn how the
software works, and to teach your students with it. You deserve to be
able to hire your favorite programmer to fix it when it breaks.

   You deserve free software.


File: tutorial.info,  Node: Why free software needs free documentation,  Next: Copyleft; Pragmatic Idealism,  Prev: Why software should not have owners,  Up: Philosophical issues

Why free software needs free documentation
==========================================

   The biggest deficiency in free operating systems is not in the
software-it is the lack of good free manuals that we can include in
these systems. Many of our most important programs do not come with
full manuals. Documentation is an essential part of any software
package; when an important free software package does not come with a
free manual, that is a major gap. We have many such gaps today.

   Once upon a time, many years ago, I thought I would learn Perl. I
got a copy of a free manual, but I found it hard to read. When I asked
Perl users about alternatives, they told me that there were better
introductory manuals-but those were not free.

   Why was this? The authors of the good manuals had written them for
O'Reilly Associates, which published them with restrictive terms-no
copying, no modification, source files not available-which exclude them
from the free software community.

   That wasn't the first time this sort of thing has happened, and (to
our community's great loss) it was far from the last. Proprietary manual
publishers have enticed a great many authors to restrict their manuals
since then. Many times I have heard a GNU user eagerly tell me about a
manual that he is writing, with which he expects to help the GNU
project-and then had my hopes dashed, as he proceeded to explain that
he had signed a contract with a publisher that would restrict it so that
we cannot use it.

   Given that writing good English is a rare skill among programmers, we
can ill afford to lose manuals this way.

   Free documentation, like free software, is a matter of freedom, not
price.  The problem with these manuals was not that O'Reilly Associates
charged a price for printed copies-that in itself is fine. (The Free
Software Foundation sells printed copies of free GNU manuals, too.)
But GNU manuals are available in source code form, while these manuals
are available only on paper. GNU manuals come with permission to copy
and modify; the Perl manuals do not. These restrictions are the
problems.

   The criterion for a free manual is pretty much the same as for free
software: it is a matter of giving all users certain freedoms.
Redistribution (including commercial redistribution) must be permitted,
so that the manual can accompany every copy of the program, on-line or
on paper. Permission for modification is crucial too.

   As a general rule, I don't believe that it is essential for people
to have permission to modify all sorts of articles and books. The
issues for writings are not necessarily the same as those for software.
For example, I don't think you or I are obliged to give permission to
modify articles like this one, which describe our actions and our views.

   But there is a particular reason why the freedom to modify is
crucial for documentation for free software. When people exercise their
right to modify the software, and add or change its features, if they
are conscientious they will change the manual too-so they can provide
accurate and usable documentation with the modified program. A manual
which forbids programmers to be conscientious and finish the job, or
more precisely requires them to write a new manual from scratch if they
change the program, does not fill our community's needs.

   While a blanket prohibition on modification is unacceptable, some
kinds of limits on the method of modification pose no problem. For
example, requirements to preserve the original author's copyright
notice, the distribution terms, or the list of authors, are ok. It is
also no problem to require modified versions to include notice that
they were modified, even to have entire sections that may not be
deleted or changed, as long as these sections deal with nontechnical
topics. (Some GNU manuals have them.)

   These kinds of restrictions are not a problem because, as a practical
matter, they don't stop the conscientious programmer from adapting the
manual to fit the modified program. In other words, they don't block the
free software community from doing its thing with the program and the
manual together.

   However, it must be possible to modify all the technical content of
the manual; otherwise, the restrictions do block the community, the
manual is not free, and so we need another manual.

   Unfortunately, it is often hard to find someone to write another
manual when a proprietary manual exists. The obstacle is that many
users think that a proprietary manual is good enough-so they don't see
the need to write a free manual. They do not see that the free
operating system has a gap that needs filling.

   Why do users think that proprietary manuals are good enough? Some
have not considered the issue. I hope this article will do something to
change that.

   Other users consider proprietary manuals acceptable for the same
reason so many people consider proprietary software acceptable: they
judge in purely practical terms, not using freedom as a criterion. These
people are entitled to their opinions, but since those opinions spring
from values which do not include freedom, they are no guide for those
of us who do value freedom.

   Please spread the word about this issue. We continue to lose manuals
to proprietary publishing. If we spread the word that proprietary
manuals are not sufficient, perhaps the next person who wants to help
GNU by writing documentation will realize, before it is too late, that
he must above all make it free.

   We can also encourage commercial publishers to sell free, copylefted
manuals instead of proprietary ones. One way you can help this is to
check the distribution terms of a manual before you buy it, and prefer
copylefted manuals to non-copylefted ones.


File: tutorial.info,  Node: Copyleft; Pragmatic Idealism,  Next: The X Windows Trap,  Prev: Why free software needs free documentation,  Up: Philosophical issues

Copyleft; Pragmatic Idealism
============================

   Every decision a person makes stems from the person's values and
goals.  People can have many different goals and values; fame, profit,
love, survival, fun, and freedom, are just some of the goals that a
good person might have.  When the goal is to help others as well as
oneself, we call that idealism.

   My work on free software is motivated by an idealistic goal:
spreading freedom and cooperation.  I want to encourage free software
to spread, replacing proprietary software which forbids cooperation,
and thus make our society better.

   That's the basic reason why the GNU General Public License is written
the way it is-as a copyleft.  All code added to a GPL-covered program
must be free software, even if it is put in a separate file.  I make my
code available for use in free software, and not for use in proprietary
software, in order to encourage other people who write software to make
it free as well.  I figure that since proprietary software developers
use copyright to stop us from sharing, we cooperators can use copyright
to give other cooperators an advantage of their own: they can use our
code.

   Not everyone who uses the GNU GPL has this goal.  Many years ago, a
friend of mine was asked to rerelease a copylefted program under
non-copyleft terms, and he responded more or less like this:
     Sometimes I work on free software, and sometimes I work on
     proprietary software--but when I work on proprietary software, I
     expect to get _paid_.
   He was willing to share his work with a community that shares
software, but saw no reason to give a handout to a business.  His goal
was different from mine, but he decided that the GNU GPL was useful for
his goal too.

   If you want to accomplish something in the world, idealism is not
enough-you need to choose a method which works to achieve the goal.  In
other words, you need to be "pragmatic." Is the GPL pragmatic?  Let's
look at its results.

   Consider GNU C++.  Why do we have a free C++ compiler?  Only because
the GNU GPL said it had to be free.  GNU C++ was developed by an
industry consortium, MCC, starting from the GNU C compiler.  MCC
normally makes its work as proprietary as can be.  But they made the
C++ front end free software, because the GNU GPL said that was the only
way they could release it.  The C++ front end included many new files,
but since they were meant to be linked with GCC, the GPL did applied to
them.  The benefit to our community is evident.

   Consider GNU Objective C.  NeXT initially wanted to make this front
end proprietary; they proposed to release it as .o files, and let users
link them with the rest of GCC, thinking this might be a way around the
GPL's requirements.  But our lawyer said that this would not evade the
requirements, that it was not allowed.  And so they made the Objective
C front end free software.

   Those examples happened years ago, but the GNU GPL continues to
bring us more free software.

   Many GNU libraries are covered by the GNU Library General Public
License, but not all.  One GNU library which is covered by the ordinary
GNU GPL is Readline, which implements command-line editing.  A month
ago, I found out about a non-free program which was designed to use
Readline, and told the developer this was not allowed.  He could have
taken command-line editing out of the program, but what he actually did
was rerelease it under the GPL.  Now it is free software.

   The programmers who write improvements to GCC (or Emacs, or Bash, or
Linux, or any GPL-covered program) are often employed by companies or
universities.  When the programmer wants to return his improvements to
the community, and see his code in the next release, the boss may say,
"Hold on there-your code belongs to us!  We don't want to share it; we
have decided to turn your improved version into a proprietary software
product."

   Here the GNU GPL comes to the rescue.  The programmer shows the boss
that this proprietary software product would be copyright infringement,
and the boss realizes that he has only two choices: release the new
code as free software, or not at all.  Almost always he lets the
programmer do as he intended all along, and the code goes into the next
release.

   The GNU GPL is not Mr. Nice Guy.  It says "no" to some of the things
that people sometimes want to do.  There are users who say that this is
a bad thing-that the GPL "excludes" some proprietary software
developers who "need to be brought into the free software community".

   But we are not excluding them from our community; they are choosing
not to enter.  Their decision to make software proprietary is a
decision to stay out of our community.  Being in our community means
joining in cooperation with us; we cannot "bring them into our
community" if they don't want to join.

   What we _can_ do is offer them an inducement to join.  The GNU GPL is
designed to make an inducement from our existing software: "If you will
make your software free, you can use this code."  Of course, it won't
win 'em all, but it wins some of the time.

   Proprietary software development does not contribute to our
community, but its developers often want handouts from us.  Free
software users can offer free software developers strokes for the
ego-recognition and gratitude-but it can be very tempting when a
business tells you, "Just let us put your package in our proprietary
program, and your program will be used by many thousands of people!"
The temptation can be powerful, but in the long run we are all better
off if we resist it.

   The temptation and pressure are harder to recognize when they come
indirectly, through free software organizations that have adopted a
policy of catering to proprietary software.  The X Consortium (and its
successor, the Open Group) offers an example: funded by companies that
made proprietary software, they have strived for a decade to persuade
programmers not to use copyleft.  Now that the Open Group has made
X11R6.4 non-free software, those of us who resisted that pressure are
glad that we did.

   Pragmatically speaking, thinking about greater long-term goals will
strengthen your will to resist this pressure.  If you focus your mind
on the freedom and community that you can build by staying firm, you
will find the strength to do it.  "Stand for something, or you will
fall for nothing."

   And if cynics ridicule freedom, ridicule community...if "hard nosed
realists" say that profit is the only ideal...just ignore them, and use
copyleft all the same.


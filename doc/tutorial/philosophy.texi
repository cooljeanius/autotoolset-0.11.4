@c Copyright (C) 1998 Eleftherios Gkioulekas <lf@amath.washington.edu>
@c  
@c Permission is granted to make and distribute verbatim copies of
@c this manual provided the copyright notice and this permission notice
@c are preserved on all copies.
@c  
@c Permission is granted to process this file through TeX and print the
@c results, provided the printed document carries copying permission
@c notice identical to this one except for the removal of this paragraph
@c (this paragraph not being relevant to the printed manual).
@c  
@c Permission is granted to copy and distribute modified versions of this
@c manual under the conditions for verbatim copying, provided that the
@c entire resulting derived work is distributed under the terms of a 
@c permission notice identical to this one.
@c  
@c Permission is granted to copy and distribute translations of this manual
@c into another language, under the above conditions for modified versions,
@c except that this permission notice may be stated in a translation
@c approved by the Free Software Foundation
@c  

@node Philosophical issues, , Legal issues with Free Software, Top
@appendix Philosophical issues

The GNU development tools were written primarily to aid the development of
@dfn{free software}. The free software movement was born by
important philosophical concerns, and it is these concerns that motivate
many software developers to contribute their code to our community. 
In this appendix we include a few articles written by Richard Stallman that
discuss these concerns. The text of these articles is copyrighted and
included here with permission from the following terms:

@strong{Copying Notice}
@display
Copyright @copyright{} 1998 Free Software Foundation Inc
59 Temple Place, Suite 330, Boston, MA 02111, USA
Verbatim copying and distribution is permitted in any medium,
provided this notice is preserved.
@end display

All of these articles, and others are distributed on the web at:@*
@uref{http://www.gnu.org/philosophy/index.html}

@menu
* Why software should not have owners::  
* Why free software needs free documentation::  
* Copyleft; Pragmatic Idealism::  
* The X Windows Trap::          
* Categories of software::      
* Confusing words::             
@end menu

@node Why software should not have owners, Why free software needs free documentation, Philosophical issues, Philosophical issues
@section Why software should not have owners

Digital information technology contributes to the world by
making it easier to copy and modify information. Computers
promise to make this easier for all of us. 

Not everyone wants it to be easier. The system of copyright
gives software programs ``owners'', most of whom aim to
withhold software's potential benefit from the rest of the public.
They would like to be the only ones who can copy and modify the
software that we use. 

The copyright system grew up with printing---a technology for
mass production copying. Copyright fit in well with this
technology because it restricted only the mass producers of
copies. It did not take freedom away from readers of books. An
ordinary reader, who did not own a printing press, could copy
books only with pen and ink, and few readers were sued for that.

Digital technology is more flexible than the printing press: when
information has digital form, you can easily copy it to share it
with others. This very flexibility makes a bad fit with a system
like copyright. That's the reason for the increasingly nasty and
draconian measures now used to enforce software copyright.
Consider these four practices of the Software Publishers
Association (SPA): 

@itemize @bullet
@item
Massive propaganda saying it is wrong to disobey the
owners to help your friend. 
@item
Solicitation for stool pigeons to inform on their
coworkers and colleagues. 
@item
Raids (with police help) on offices and schools, in which
people are told they must prove they are innocent of
illegal copying. 
@item
Prosecution (by the US government, at the SPA's
request) of people such as MIT's David LaMacchia, not
for copying software (he is not accused of copying any),
but merely for leaving copying facilities unguarded and
failing to censor their use. 
@end itemize

All four practices resemble those used in the former Soviet
Union, where every copying machine had a guard to prevent
forbidden copying, and where individuals had to copy information
secretly and pass it from hand to hand as ``samizdat''. There is
of course a difference: the motive for information control in the
Soviet Union was political; in the US the motive is profit. But it
is the actions that affect us, not the motive. Any attempt to
block the sharing of information, no matter why, leads to the
same methods and the same harshness. 

Owners make several kinds of arguments for giving them the
power to control how we use information: 
@itemize @bullet
@item
@strong{Name calling}:
Owners use smear words such as ``piracy'' and
``theft'', as well as expert terminology such as
``intellectual property'' and ``damage'', to suggest a
certain line of thinking to the public---a simplistic
analogy between programs and physical objects. 

Our ideas and intuitions about property for material
objects are about whether it is right to @emph{take an object away}
from someone else. They don't directly apply to
@emph{making a copy} of something. But the owners ask us to
apply them anyway. 
@item
@strong{Exaggeration}:
Owners say that they suffer ``harm'' or ``economic
loss'' when users copy programs themselves. But the
copying has no direct effect on the owner, and it harms
no one. The owner can lose only if the person who made
the copy would otherwise have paid for one from the
owner. 

A little thought shows that most such people would not
have bought copies. Yet the owners compute their
``losses'' as if each and every one would have bought a
copy. That is exaggeration---to put it kindly. 
@item
@strong{The law}:
Owners often describe the current state of the law, and
the harsh penalties they can threaten us with. Implicit in
this approach is the suggestion that today's law reflects
an unquestionable view of morality---yet at the same
time, we are urged to regard these penalties as facts of
nature that can't be blamed on anyone. 

This line of persuasion isn't designed to stand up to
critical thinking; it's intended to reinforce a habitual
mental pathway. 

It's elementary that laws don't decide right and wrong.
Every American should know that, forty years ago, it
was against the law in many states for a black person to
sit in the front of a bus; but only racists would say
sitting there was wrong. 
@item
@strong{Natural rights}:
Authors often claim a special connection with programs
they have written, and go on to assert that, as a result,
their desires and interests concerning the program
simply outweigh those of anyone else---or even those
of the whole rest of the world. (Typically companies, not
authors, hold the copyrights on software, but we are
expected to ignore this discrepancy.) 

To those who propose this as an ethical axiom---the
author is more important than you---I can only say that
I, a notable software author myself, call it bunk. 

But people in general are only likely to feel any
sympathy with the natural rights claims for two reasons.

One reason is an overstretched analogy with material
objects. When I cook spaghetti, I do object if someone
else eats it, because then I cannot eat it. His action
hurts me exactly as much as it benefits him; only one of
us can eat the spaghetti, so the question is, which? The
smallest distinction between us is enough to tip the
ethical balance. 

But whether you run or change a program I wrote affects
you directly and me only indirectly. Whether you give a
copy to your friend affects you and your friend much
more than it affects me. I shouldn't have the power to
tell you not to do these things. No one should. 

The second reason is that people have been told that
natural rights for authors is the accepted and
unquestioned tradition of our society. 

As a matter of history, the opposite is true. The idea of
natural rights of authors was proposed and decisively
rejected when the US Constitution was drawn up. That's
why the Constitution only permits a system of copyright
and does not require one; that's why it says that
copyright must be temporary. It also states that the
purpose of copyright is to promote progress---not to
reward authors. Copyright does reward authors
somewhat, and publishers more, but that is intended as a
means of modifying their behavior. 

The real established tradition of our society is that
copyright cuts into the natural rights of the
public---and that this can only be justified for the
public's sake. 
@item
@strong{Economics}
The final argument made for having owners of software
is that this leads to production of more software. 

Unlike the others, this argument at least takes a
legitimate approach to the subject. It is based on a valid
goal---satisfying the users of software. And it is
empirically clear that people will produce more of
something if they are well paid for doing so. 

But the economic argument has a flaw: it is based on the
assumption that the difference is only a matter of how
much money we have to pay. It assumes that
``production of software'' is what we want, whether the
software has owners or not. 

People readily accept this assumption because it
accords with our experiences with material objects.
Consider a sandwich, for instance. You might well be
able to get an equivalent sandwich either free or for a
price. If so, the amount you pay is the only difference.
Whether or not you have to buy it, the sandwich has the
same taste, the same nutritional value, and in either
case you can only eat it once. Whether you get the
sandwich from an owner or not cannot directly affect
anything but the amount of money you have afterwards. 

This is true for any kind of material object---whether or
not it has an owner does not directly affect what it is, or
what you can do with it if you acquire it. 

But if a program has an owner, this very much affects
what it is, and what you can do with a copy if you buy
one. The difference is not just a matter of money. The
system of owners of software encourages software
owners to produce something---but not what society
really needs. And it causes intangible ethical pollution
that affects us all. 

What does society need? It needs information that is
truly available to its citizens---for example, programs
that people can read, fix, adapt, and improve, not just
operate. But what software owners typically deliver is a
black box that we can't study or change. 

Society also needs freedom. When a program has an
owner, the users lose freedom to control part of their
own lives. 

And above all society needs to encourage the spirit of
voluntary cooperation in its citizens. When software
owners tell us that helping our neighbors in a natural
way is ``piracy'', they pollute our society's civic spirit. 

This is why we say that free software is a matter of
freedom, not price. 

The economic argument for owners is erroneous, but the
economic issue is real. Some people write useful
software for the pleasure of writing it or for admiration
and love; but if we want more software than those
people write, we need to raise funds. 

For ten years now, free software developers have tried
various methods of finding funds, with some success.
There's no need to make anyone rich; the median US
family income, around $35k, proves to be enough
incentive for many jobs that are less satisfying than
programming. 

For years, until a fellowship made it unnecessary, I
made a living from custom enhancements of the free
software I had written. Each enhancement was added to
the standard released version and thus eventually
became available to the general public. Clients paid me
so that I would work on the enhancements they wanted,
rather than on the features I would otherwise have
considered highest priority. 

The Free Software Foundation (FSF), a tax-exempt
charity for free software development, raises funds by
selling GNU CD-ROMs, T-shirts, manuals, and deluxe
distributions, (all of which users are free to copy and
change), as well as from donations. It now has a staff of
five programmers, plus three employees who handle mail
orders. 

Some free software developers make money by selling
support services. Cygnus Support, with around 50
employees [when this article was written], estimates
that about 15 per cent of its staff activity is free
software development---a respectable percentage for a
software company. 

Companies including Intel, Motorola, Texas Instruments
and Analog Devices have combined to fund the
continued development of the free GNU compiler for the
language C. Meanwhile, the GNU compiler for the Ada
language is being funded by the US Air Force, which
believes this is the most cost-effective way to get a
high quality compiler. [Air Force funding ended some
time ago; the GNU Ada Compiler is now in service, and
its maintenance is funded commercially.] 

All these examples are small; the free software
movement is still small, and still young. But the example
of listener-supported radio in this country [the US]
shows it's possible to support a large activity without
forcing each user to pay. 
@end itemize

As a computer user today, you may find yourself using a
proprietary program. If your friend asks to
make a copy, it would be wrong to refuse. Cooperation is more
important than copyright. But underground, closet cooperation
does not make for a good society. A person should aspire to live
an upright life openly with pride, and this means saying ``No'' to
proprietary software. 

You deserve to be able to cooperate openly and freely with other
people who use software. You deserve to be able to learn how
the software works, and to teach your students with it. You
deserve to be able to hire your favorite programmer to fix it when
it breaks. 

You deserve free software. 

@c ---------------------------------------------------------------------------

@node Why free software needs free documentation, Copyleft; Pragmatic Idealism, Why software should not have owners, Philosophical issues
@section Why free software needs free documentation

The biggest deficiency in free operating systems is not in the
software--it is the lack of good free manuals that we can include in
these systems. Many of our most important programs do not come with
full manuals. Documentation is an essential part of any software
package; when an important free software package does not come with a
free manual, that is a major gap. We have many such gaps today. 

Once upon a time, many years ago, I thought I would learn Perl. I got a
copy of a free manual, but I found it hard to read. When I asked Perl
users about alternatives, they told me that there were better introductory
manuals--but those were not free. 

Why was this? The authors of the good manuals had written them for
O'Reilly Associates, which published them with restrictive terms--no
copying, no modification, source files not available--which exclude
them from the free software community. 

That wasn't the first time this sort of thing has happened, and (to our
community's great loss) it was far from the last. Proprietary manual
publishers have enticed a great many authors to restrict their manuals
since then. Many times I have heard a GNU user eagerly tell me about a
manual that he is writing, with which he expects to help the GNU
project--and then had my hopes dashed, as he proceeded to explain that
he had signed a contract with a publisher that would restrict it so that
we cannot use it. 

Given that writing good English is a rare skill among programmers, we
can ill afford to lose manuals this way. 

Free documentation, like free software, is a matter of freedom, not price.
The problem with these manuals was not that O'Reilly Associates
charged a price for printed copies--that in itself is fine. (The Free
Software Foundation sells printed copies of free GNU manuals, too.)
But GNU manuals are available in source code form, while these
manuals are available only on paper. GNU manuals come with
permission to copy and modify; the Perl manuals do not. These
restrictions are the problems. 

The criterion for a free manual is pretty much the same as for free
software: it is a matter of giving all users certain freedoms.
Redistribution (including commercial redistribution) must be permitted,
so that the manual can accompany every copy of the program, on-line or
on paper. Permission for modification is crucial too. 

As a general rule, I don't believe that it is essential for people to have
permission to modify all sorts of articles and books. The issues for
writings are not necessarily the same as those for software. For
example, I don't think you or I are obliged to give permission to modify
articles like this one, which describe our actions and our views. 

But there is a particular reason why the freedom to modify is crucial for
documentation for free software. When people exercise their right to
modify the software, and add or change its features, if they are
conscientious they will change the manual too--so they can provide
accurate and usable documentation with the modified program. A manual
which forbids programmers to be conscientious and finish the job, or
more precisely requires them to write a new manual from scratch if they
change the program, does not fill our community's needs. 

While a blanket prohibition on modification is unacceptable, some kinds
of limits on the method of modification pose no problem. For example,
requirements to preserve the original author's copyright notice, the
distribution terms, or the list of authors, are ok. It is also no problem to
require modified versions to include notice that they were modified, even
to have entire sections that may not be deleted or changed, as long as
these sections deal with nontechnical topics. (Some GNU manuals have
them.) 

These kinds of restrictions are not a problem because, as a practical
matter, they don't stop the conscientious programmer from adapting the
manual to fit the modified program. In other words, they don't block the
free software community from doing its thing with the program and the
manual together. 

However, it must be possible to modify all the technical content of the
manual; otherwise, the restrictions do block the community, the manual
is not free, and so we need another manual. 

Unfortunately, it is often hard to find someone to write another manual
when a proprietary manual exists. The obstacle is that many users think
that a proprietary manual is good enough--so they don't see the need to
write a free manual. They do not see that the free operating system has
a gap that needs filling. 

Why do users think that proprietary manuals are good enough? Some
have not considered the issue. I hope this article will do something to
change that. 

Other users consider proprietary manuals acceptable for the same
reason so many people consider proprietary software acceptable: they
judge in purely practical terms, not using freedom as a criterion. These
people are entitled to their opinions, but since those opinions spring from
values which do not include freedom, they are no guide for those of us
who do value freedom. 

Please spread the word about this issue. We continue to lose manuals to
proprietary publishing. If we spread the word that proprietary manuals
are not sufficient, perhaps the next person who wants to help GNU by
writing documentation will realize, before it is too late, that he must
above all make it free. 

We can also encourage commercial publishers to sell free, copylefted
manuals instead of proprietary ones. One way you can help this is to
check the distribution terms of a manual before you buy it, and prefer
copylefted manuals to non-copylefted ones. 

@c -----------------------------------------------------------------------

@node Copyleft; Pragmatic Idealism, The X Windows Trap, Why free software needs free documentation, Philosophical issues
@section Copyleft; Pragmatic Idealism

Every decision a person makes stems from the person's values and
goals.  People can have many different goals and values; fame, profit,
love, survival, fun, and freedom, are just some of the goals that a
good person might have.  When the goal is to help others as well as
oneself, we call that idealism.

My work on free software is motivated by an idealistic goal: spreading
freedom and cooperation.  I want to encourage free software to spread,
replacing proprietary software which forbids cooperation, and thus
make our society better.

That's the basic reason why the GNU General Public License is written
the way it is--as a copyleft.  All code added to a GPL-covered program
must be free software, even if it is put in a separate file.  I make
my code available for use in free software, and not for use in
proprietary software, in order to encourage other people who write
software to make it free as well.  I figure that since proprietary
software developers use copyright to stop us from sharing, we
cooperators can use copyright to give other cooperators an advantage
of their own: they can use our code.

Not everyone who uses the GNU GPL has this goal.  Many years ago, a
friend of mine was asked to rerelease a copylefted program under
non-copyleft terms, and he responded more or less like this:
@display
Sometimes I work on free software, and sometimes I work on
proprietary software--but when I work on proprietary software, I
expect to get @emph{paid}.
@end display
He was willing to share his work with a community that shares
software, but saw no reason to give a handout to a business.  His goal
was different from mine, but he decided that the GNU GPL was useful
for his goal too.

If you want to accomplish something in the world, idealism is not
enough--you need to choose a method which works to achieve the goal.
In other words, you need to be ``pragmatic.'' Is the GPL pragmatic?
Let's look at its results.

Consider GNU C++.  Why do we have a free C++ compiler?  Only because
the GNU GPL said it had to be free.  GNU C++ was developed by an
industry consortium, MCC, starting from the GNU C compiler.  MCC
normally makes its work as proprietary as can be.  But they made the
C++ front end free software, because the GNU GPL said that was the
only way they could release it.  The C++ front end included many new
files, but since they were meant to be linked with GCC, the GPL
did applied to them.  The benefit to our community is evident.

Consider GNU Objective C.  NeXT initially wanted to make this front
end proprietary; they proposed to release it as .o files, and let
users link them with the rest of GCC, thinking this might be a way
around the GPL's requirements.  But our lawyer said that this would
not evade the requirements, that it was not allowed.  And so they made
the Objective C front end free software.

Those examples happened years ago, but the GNU GPL continues
to bring us more free software.

Many GNU libraries are covered by the GNU Library General Public
License, but not all.  One GNU library which is covered by the
ordinary GNU GPL is Readline, which implements command-line editing.
A month ago, I found out about a non-free program which was designed
to use Readline, and told the developer this was not allowed.  He
could have taken command-line editing out of the program, but what he
actually did was rerelease it under the GPL.  Now it is free software.

The programmers who write improvements to GCC (or Emacs, or Bash, or
Linux, or any GPL-covered program) are often employed by companies or
universities.  When the programmer wants to return his improvements to
the community, and see his code in the next release, the boss may say,
``Hold on there--your code belongs to us!  We don't want to share it;
we have decided to turn your improved version into a proprietary
software product.''

Here the GNU GPL comes to the rescue.  The programmer shows the boss
that this proprietary software product would be copyright
infringement, and the boss realizes that he has only two choices:
release the new code as free software, or not at all.  Almost always
he lets the programmer do as he intended all along, and the code goes
into the next release.

The GNU GPL is not Mr. Nice Guy.  It says ``no'' to some of the things
that people sometimes want to do.  There are users who say that this
is a bad thing--that the GPL ``excludes'' some proprietary software
developers who ``need to be brought into the free software community''.

But we are not excluding them from our community; they are choosing
not to enter.  Their decision to make software proprietary is a
decision to stay out of our community.  Being in our community means
joining in cooperation with us; we cannot ``bring them into our
community'' if they don't want to join.

What we @emph{can} do is offer them an inducement to join.  The GNU GPL is
designed to make an inducement from our existing software: ``If you
will make your software free, you can use this code.''  Of course, it
won't win 'em all, but it wins some of the time.

Proprietary software development does not contribute to our community,
but its developers often want handouts from us.  Free software users
can offer free software developers strokes for the ego--recognition
and gratitude--but it can be very tempting when a business tells you,
``Just let us put your package in our proprietary program, and your
program will be used by many thousands of people!''  The temptation can
be powerful, but in the long run we are all better off if we resist
it.

The temptation and pressure are harder to recognize when they come
indirectly, through free software organizations that have adopted a
policy of catering to proprietary software.  The X Consortium (and its
successor, the Open Group) offers an example: funded by companies that
made proprietary software, they have strived for a decade to persuade
programmers not to use copyleft.  Now that the Open Group has made
X11R6.4 non-free software, those of us who resisted that pressure are
glad that we did.

Pragmatically speaking, thinking about greater long-term goals will
strengthen your will to resist this pressure.  If you focus your mind
on the freedom and community that you can build by staying firm, you
will find the strength to do it.  ``Stand for something, or you will
fall for nothing.''

And if cynics ridicule freedom, ridicule community...if ``hard nosed
realists'' say that profit is the only ideal...just ignore them, and
use copyleft all the same.

@c ---------------------------------------------------------------------------

@node The X Windows Trap, Categories of software, Copyleft; Pragmatic Idealism, Philosophical issues
@section The X Windows Trap

To copyleft or not to copyleft?  That is one of the major
controversies in the free software community.  The idea of copyleft is
that we should fight fire with fire--that we should use copyright to
make sure our code stays free.  The GNU GPL is one example of 
a copyleft license.

Some free software developers prefer non-copyleft distribution.
Non-copyleft licenses such as the XFree86 and BSD licenses are based
on the idea of never saying no to anyone--not even to someone who
seeks to use your work as the basis for restricting other people.
Non-copyleft licensing does nothing wrong, but it misses the
opportunity to actively protect our freedom to change and redistribute
software.  For that, we need copyleft.

For many years, the X Consortium was the chief opponent of copyleft.
It exerted both moral suasion and pressure to discourage free software
developers from copylefting their programs.  It used moral suasion by
suggesting that it is not nice to say no.  It used pressure through
its rule that copylefted software could not be in the X Distribution.

Why did the X Consortium adopt this policy?  It had to do with their
definition of success.  The X Consortium defined success as
popularity--specifically, getting computer companies to use X Windows.
This definition put the computer companies in the driver's seat.
Whatever they wanted, the X Consortium had to help them get it.

Computer companies normally distribute proprietary software.  They
wanted free software developers to donate their work for such use.  If
they had asked for this directly, people would have laughed.  But the
X Consortium, fronting for them, could present this request as an
unselfish one.  "Join us in donating our work to proprietary software
developers," they said, suggesting that this is a noble form of
self-sacrifice.  "Join us in achieving popularity", they said,
suggesting that it was not even a sacrifice.

But self-sacrifice is not the issue: tossing away the defenses of
copyleft, which protect the freedom of everyone in the community, is
sacrificing more than yourself.  Those who granted the X Consortium's
request entrusted the community's future to the good will of the X
Consortium.

This trust was misplaced.  In its last year, the X Consortium made a
plan to restrict the forthcoming X11R6.4 release so that it will not
be free software.  They decided to start saying no, not only to
proprietary software developers, but to our community as well.

There is an irony here.  If you said yes when the X Consortium asked
you not to use copyleft, you put the X Consortium in a position to
license and restrict its version of your program, along with its own  
code.

Te X Consortium did not carry out this plan.  Instead it closed down
and transferred X development to the Open Group, whose staff are now
carrying out a similar plan.  To give them credit, when I asked them
to release X11R6.4 under the GNU GPL in parallel with their planned 
restrictive license, they were willing to consider the idea.  (They
were firmly against staying with the old X11 distribution terms.)
Before they said yes or no to this proposal, it had already failed for
another reason: the XFree86 group follows the X Consortium's old
policy, and will not accept copylefted software.

Even if the X Consortium and the Open Group had never planned to
restrict X, someone else could have done it.  Non-copylefted software
is vulnerable from all directions; it lets anyone make a non-free
version dominant, if he will invest sufficient resources to add some
important feature using proprietary code.  Users who choose software
based on technical characteristics, rather than on freedom, could
easily be lured to the non-free version for short term convenience.

The X Consortium and Open Group can no longer exert moral suasion by
saying that it is wrong to say no.  This will make it easier to decide
to copyleft your X-related software.

When you work on the core of X, on programs such as the X server,
Xlib, and Xt, there is a practical reason not to use copyleft.  The 
XFree86 group does an important job for the community in maintaining 
these programs, and the benefit of copylefting our changes would be
less than the harm done by a fork in development.  So it is better to
work with the XFree86 group and not copyleft our changes on these
programs.  Likewise for utilities such as xset and xrdb, which are
close to the core of X, and which do not need major improvements.  At
least we know that the XFree86 group has a firm commitment to
developing these programs as free software.

The issue is different for programs outside the core of X:
applications, window managers, and additional libraries and widgets.
There is no reason not to copyleft them, and we should copyleft them.

In case anyone feels the pressure exerted by the criteria for 
inclusion in X Distributions, the GNU project will undertake to
publicize copylefted packages that work with X.  If you would like to
copyleft something, and you worry that its omission from X
Distributions will impede its popularity, please ask us to help.

At the same time, it is better if we do not feel too much need for
popularity.  When a businessman tempts you with "more popularity", he
may try to convince you that his use of your program is crucial to its
success.  Don't believe it!  If your program is good, it will find
many users anyway; you don't need to feel desperate for any particular
users, and you will be stronger if you do not.  You can get an
indescribable sense of joy and freedom by responding, "Take it or
leave it--that's no skin off my back."  Often the businessman will 
turn around and accept the program with copyleft, once you call the
bluff.

Friends, free software developers, don't repeat a mistake.  If we do
not copyleft our software, we put its future at the mercy of anyone
equipped with more resources than scruples.  With copyleft, we can
defend freedom, not just for ourselves, but for our whole community.

@c ---------------------------------------------------------------------------

@node Categories of software, Confusing words, The X Windows Trap, Philosophical issues
@section Categories of software

Here is a glossary of various categories of software that are often
mentioned in discussions of free software. It explains which categories
overlap or are part of other categories. 

@itemize @bullet
@item
@strong{Free software}:
Free software is software that comes with permission for
anyone to use, copy, and distribute, either verbatim or with
modifications, either gratis or for a fee. In particular, this means
that source code must be available. ``If it's not source, it's not
software.'' 

If a program is free, then it can potentially be included in a free
operating system such as GNU, or free GNU/Linux systems . 

There are many different ways to make a program free---many
questions of detail, which could be decided in more than one way
and still make the program free. Some of the possible variations
are described below. 

Free software is a matter of freedom, not price. But proprietary
software companies sometimes use the term ``free software'' to
refer to price. Sometimes they mean that you can obtain a binary
copy at no charge; sometimes they mean that a copy is included
on a computer that you are buying. This has nothing to do with
what we mean by free software in the GNU project. 

Because of this potential confusion, when a software company
says its product is free software, always check the actual
distribution terms to see whether users really have all the
freedoms that free software implies. Sometimes it really is free
software; sometimes it isn't. 

Many languages have two separate words for ``free'' as in
freedom and ``free'' as in zero price. For example, French has
``libre'' and ``gratuit''. English has a word ``gratis'' that refers
unambiguously to price, but no common adjective that refers
unambiguously to freedom. This is unfortunate, because such a
word would be useful here. 

Free software is often more reliable than non-free software. 
@item
@strong{Open Source software}:
The term ``open source'' software is used by some people to
mean more or less the same thing as free software. 
@item
@strong{Public domain software}:
Public domain software is software that is not copyrighted. It is
a special case of non-copylefted free software, which means
that some copies or modified versions may not be free at all. 

Sometimes people use the term ``public domain'' in a loose
fashion to mean ``free'' or ``available gratis.'' However, ``public
domain'' is a legal term and means, precisely, ``not
copyrighted''. For clarity, we recommend using ``public domain''
for that meaning only, and using other terms to convey the other
meanings. 
@item
@strong{Copylefted software}:
Copylefted software is free software whose distribution terms
do not let redistributors add any additional restrictions when
they redistribute or modify the software. This means that every
copy of the software, even if it has been modified, must be free
software. 

In the GNU Project, we copyleft almost all the software we
write, because our goal is to give every user the freedoms
implied by the term ``free software.'' See Copylefted for more
explanation of how copyleft works and why we use it. 

Copyleft is a general concept; to actually copyleft a program, you
need to use a specific set of distribution terms. There are many
possible ways to write copyleft distribution terms. 
@item
@strong{Non-copylefted free software}:
Non-copylefted free software comes from the author with
permission to redistribute and modify, and also to add additional
restrictions to it. 

If a program is free but not copylefted, then some copies or
modified versions may not be free at all. A software company
can compile the program, with or without modifications, and
distribute the executable file as a proprietary software product. 

The X Window System illustrates this. The X Consortium
releases X11 with distribution terms that make it
non-copylefted free software. If you wish, you can get a copy
which has those distribution terms and is free. However, there
are non-free versions as well, and there are popular
workstations and PC graphics boards for which non-free
versions are the only ones that work. If you are using this
hardware, X11 is not free software for you. 
@item
@strong{GPL-covered software}:
The GNU GPL is one
specific set of distribution terms for copylefting a program. The
GNU Project uses it as the distribution terms for most GNU
software. 
@item
@strong{The GNU system}:
The GNU system is a complete free Unix-like operating system.

A Unix-like operating system consists of many programs. We
have been accumulating components for this system since 1984;
the first test release of a ``complete GNU system'' was in 1996.
We hope that in a year or so this system will be mature enough
to recommend it for ordinary users. 

The GNU system includes all the GNU software, as well as
many other packages such as the X Window System and TeX
which are not GNU software. 

Since the purpose of GNU is to be free, every single component
in the GNU system has to be free software. They don't all have
to be copylefted, however; any kind of free software is legally
suitable to include if it helps meet technical goals. We can and
do use non-copylefted free software such as the X Window
System. 
@item
@strong{GNU software}:
GNU software is software that is released under the auspices of
the GNU Project. Most GNU software is copylefted, but not all;
however, all GNU software must be free software. 

Some GNU software is written by staff of the Free Software
Foundation, but most GNU software is contributed by
volunteers. Some contributed software is copyrighted by the
Free Software Foundation; some is copyrighted by the
contributors who wrote it. 
@item
@strong{Semi-free software}:
Semi-free software is software that is not free, but comes with
permission for individuals to use, copy, distribute, and modify
(including distribution of modified versions) for non-profit
purposes. PGP is an example of a semi-free program. 

Semi-free software is much better than proprietary software,
but it still poses problems, and we cannot use it in a free
operating system. 

The restrictions of copyleft are designed to protect the essential
freedoms for all users. For us, the only justification for any
substantive restriction on using a program is to prevent other
people from adding other restrictions. Semi-free programs have
additional restrictions, motivated by purely selfish goals. 

It is impossible to include semi-free software in a free operating
system. This is because the distribution terms for the operating
system as a whole are the conjunction of the distribution terms
for all the programs in it. Adding one semi-free program to the
system would make the system as a whole just semi-free. There
are two reasons we do not want that to happen: 
@itemize @bullet
@item
We believe that free software should be for
everyone--including businesses, not just schools and
hobbyists. We want to invite business to use the whole
GNU system, and therefore we must not include a
semi-free program in it. 
@item
Commercial distribution of free operating systems,
including Linux-based GNU systems, is very important,
and users appreciate being able to buy commercial
CD-ROM distributions. Including one semi-free
program in an operating system would cut off
commercial CD-ROM distribution for it. 
@end itemize
The Free Software Foundation itself is non-commercial, and
therefore we would be legally permitted to use a semi-free
program ``internally''. But we don't do that, because that would
undermine our efforts to obtain a program which we could also
include in GNU. 

If there is a job that needs doing with software, then until we
have a free program to do the job, the GNU system has a gap.
We have to tell volunteers, ``We don't have a program yet to do
this job in GNU, so we hope you will write one.'' If we ourselves
used a semi-free program to do the job, that would undermine
what we say; it would take away the impetus (on us, and on
others who might listen to our views) to write a free
replacement. So we don't do that. 
@item
@strong{Proprietary software}:
Proprietary software is software that is not free or semi-free.
Its use, redistribution or modification is prohibited, or requires
you to ask for permission, or is restricted so much that you
effectively can't do it freely. 

The Free Software Foundation follows the rule that we cannot
install any proprietary program on our computers except
temporarily for the specific purpose of writing a free replacement
for that very program. Aside from that, we feel there is no
possible excuse for installing a proprietary program. 

For example, we felt justified in installing Unix on our computer
in the 1980s, because we were using it to write a free
replacement for Unix. Nowadays, since free operating systems
are available, the excuse is no longer applicable; we have
eliminated all our non-free operating systems, and any new
computer we install must run a completely free operating
system. 

We don't insist that users of GNU, or contributors to GNU,
have to live by this rule. It is a rule we made for ourselves. But
we hope you will decide to follow it too. 
@item
@strong{Freeware}:
The term ``freeware'' has no clear accepted definition, but it is
commonly used for packages which permit redistribution but not
modification (and their source code is not available). These
packages are not free software, so please don't use ``freeware''
to refer to free software. 
@item
@strong{Shareware}:
Shareware is software which comes with permission for people
to redistribute copies, but says that anyone who continues to
use a copy is required to pay a license fee. 

Shareware is not free software, or even semi-free. There are
two reasons it is not: 
@itemize @bullet
@item
For most shareware, source code is not available; thus you cannot modiy the
program at all.
@item
Shareware does not come with permission to make a
copy and install it without paying a license fee, not even
for individuals engaging in nonprofit activity. (In
practice, people often disregard the distribution terms
and do this anyway, but the terms don't permit it.) 
@end itemize

@item
@strong{Commercial Software}:
Commercial software is software being developed by a business
which aims to make money from the use of the software.
``Commercial'' and ``proprietary'' are not the same thing! Most
commercial software is proprietary , but there is commercial free
software, and there is non-commercial non-free software. 

For example, GNU Ada is always distributed under the terms of
the GNU GPL, and every copy is free software; but its
developers sell support contracts. When their salesmen speak to
prospective customers, sometimes the customers say, ``We
would feel safer with a commercial compiler.'' The salesmen
reply, ``GNU Ada is a commercial compiler; it happens to be free
software.'' 

For the GNU Project, the emphasis is in the other order: the
important thing is that GNU Ada is free software; whether it is
commercial is not a crucial question. However, the additional
development of GNU Ada that results from the business that
supports it is definitely beneficial. 
@end itemize

@c ------------------------------------------------------------------------

@node Confusing words,  , Categories of software, Philosophical issues
@section Confusing words

There are a number of words and phrases which we recommend
avoiding, either because they are ambiguous or because they imply an
opinion that we hope you may not entirely agree with. 

@itemize @bullet
@item
@strong{For free}:
If you want to say that a program is free software, please don't say that
it is available ``for free.'' That term specifically means ``for zero price.''
Free software is a matter of freedom, not price. 

Free software is often available for free--for example, on many FTP
servers. But free software copies are also available for a price on
CD-ROMs, and proprietary software copies may occasionally be
available for free. 
@item
@strong{Freeware}:
Please don't use the term ``freeware'' as a synonym for ``free
software.'' The term ``freeware'' was used often in the 1980s for
programs released only as executables, with source code not available.
Today it has no clear definition. 
@item
@strong{Give away software}:
It's misleading to use the term ``give away'' to mean ``distribute a
program as free software.'' It has the same problem as ``for free'': it
implies the issue is price, not freedom. 
@item
@strong{Intellectual property}:
Publishers and lawyers like to describe copyright as ``intellectual
property.'' This term carries a hidden assumption---that the most
natural way to think about the issue of copying is based on an analogy
with physical objects, and our ideas of them as property. 

But this analogy overlooks the crucial difference between material
objects and information: information can be copied and shared almost
effortlessly, while material objects can't be. Basing your thinking on this
analogy is tantamount to ignoring that difference. 

Even the US legal system does not entirely accept this analogy, since it
does not treat copyrights just like physical object property rights. 

If you don't want to limit yourself to this way of thinking, it is best to
avoid using the term ``intellectual property'' in your words and thoughts. 

A suggestion has been made to use the term ``intellectual policy''
instead of `intellectual property.'' 
@item
@strong{Piracy}:
Publishers often refer to prohibited copying as ``piracy.'' In this way,
they imply that illegal copying is ethically equivalent to attacking ships
on the high seas, kidnaping and murdering the people on them. 

If you don't believe that illegal copying is just like kidnaping and murder,
you might prefer not to use the word ``piracy'' to describe it. Neutral
terms such as ``prohibited copying'' or ``illegal copying'' are available
for use instead. Some of us might even prefer to use a positive term such
as ``sharing information with your neighbor.'' 
@item
@strong{Protection}:
Publishers' lawyers love to use the term ``protection'' to describe
copyright. This word carries the implication of preventing destruction or
suffering; therefore, it encourages people to identify with the owner and
publisher who benefit from copyright, rather than with the users who are
restricted by it. 

It is easy to avoid ``protection'' and use neutral terms instead. For
example, instead of ``Copyright protection lasts a very long time,'' you
can say, ``Copyright lasts a very long time.''
@item
@strong{Sell software}:
The term ``sell software'' is ambiguous. Strictly speaking, exchanging a
copy of a free program for a sum of money is ``selling''; but people
usually associate the term ``sell'' with proprietary restrictions on the
subsequent use of the software. You can be more precise, and prevent
confusion, by saying either ``distributing copies of a program for a fee''
or ``imposing proprietary restrictions on the use of a program,''
depending on what you mean. 
@item
@strong{Theft}:
Copyright apologists often use words like ``stolen'' and ``theft'' to
describe copyright infringement. At the same time, they ask us to treat
the legal system as an authority on ethics: if copying is forbidden, it
must be wrong. 

So it is pertinent to mention that the legal system--at least in the
US--rejects the idea that copyright infringement is ``theft''. Copyright
advocates who use terms like ``stolen'' are misrepresenting the
authority that they appeal to. 

The idea that laws decide what is right or wrong is mistaken in general.
Laws are, at their best, an attempt to achieve justice; to say that laws
define justice or ethical conduct is turning things upside down. 
@end itemize


This is toolsmanual.info, produced by makeinfo version 4.13 from
toolsmanual.texi.

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* toolsmanual: (toolsmanual).      Developing software with GNU
END-INFO-DIR-ENTRY


File: toolsmanual.info,  Node: Why software should not have owners,  Next: Why free software needs free documentation,  Prev: What is Free Software,  Up: Philosophical issues

B.3 Why software should not have owners
=======================================

Digital information technology contributes to the world by making it
easier to copy and modify information. Computers promise to make this
easier for all of us.

   Not everyone wants it to be easier. The system of copyright gives
software programs "owners", most of whom aim to withhold software's
potential benefit from the rest of the public.  They would like to be
the only ones who can copy and modify the software that we use.

   The copyright system grew up with printing--a technology for mass
production copying. Copyright fit in well with this technology because
it restricted only the mass producers of copies. It did not take
freedom away from readers of books. An ordinary reader, who did not own
a printing press, could copy books only with pen and ink, and few
readers were sued for that.

   Digital technology is more flexible than the printing press: when
information has digital form, you can easily copy it to share it with
others. This very flexibility makes a bad fit with a system like
copyright. That's the reason for the increasingly nasty and draconian
measures now used to enforce software copyright.  Consider these four
practices of the Software Publishers Association (SPA):

   * Massive propaganda saying it is wrong to disobey the owners to
     help your friend.

   * Solicitation for stool pigeons to inform on their coworkers and
     colleagues.

   * Raids (with police help) on offices and schools, in which people
     are told they must prove they are innocent of illegal copying.

   * Prosecution (by the US government, at the SPA's request) of people
     such as MIT's David LaMacchia, not for copying software (he is not
     accused of copying any), but merely for leaving copying facilities
     unguarded and failing to censor their use.

   All four practices resemble those used in the former Soviet Union,
where every copying machine had a guard to prevent forbidden copying,
and where individuals had to copy information secretly and pass it from
hand to hand as "samizdat". There is of course a difference: the motive
for information control in the Soviet Union was political; in the US
the motive is profit. But it is the actions that affect us, not the
motive. Any attempt to block the sharing of information, no matter why,
leads to the same methods and the same harshness.

   Owners make several kinds of arguments for giving them the power to
control how we use information:
   * *Name calling*: Owners use smear words such as "piracy" and
     "theft", as well as expert terminology such as "intellectual
     property" and "damage", to suggest a certain line of thinking to
     the public--a simplistic analogy between programs and physical
     objects.

     Our ideas and intuitions about property for material objects are
     about whether it is right to _take an object away_ from someone
     else. They don't directly apply to _making a copy_ of something.
     But the owners ask us to apply them anyway.

   * *Exaggeration*: Owners say that they suffer "harm" or "economic
     loss" when users copy programs themselves. But the copying has no
     direct effect on the owner, and it harms no one. The owner can
     lose only if the person who made the copy would otherwise have
     paid for one from the owner.

     A little thought shows that most such people would not have bought
     copies. Yet the owners compute their "losses" as if each and every
     one would have bought a copy. That is exaggeration--to put it
     kindly.

   * *The law*: Owners often describe the current state of the law, and
     the harsh penalties they can threaten us with. Implicit in this
     approach is the suggestion that today's law reflects an
     unquestionable view of morality--yet at the same time, we are
     urged to regard these penalties as facts of nature that can't be
     blamed on anyone.

     This line of persuasion isn't designed to stand up to critical
     thinking; it's intended to reinforce a habitual mental pathway.

     It's elementary that laws don't decide right and wrong.  Every
     American should know that, forty years ago, it was against the law
     in many states for a black person to sit in the front of a bus;
     but only racists would say sitting there was wrong.

   * *Natural rights*: Authors often claim a special connection with
     programs they have written, and go on to assert that, as a result,
     their desires and interests concerning the program simply outweigh
     those of anyone else--or even those of the whole rest of the
     world. (Typically companies, not authors, hold the copyrights on
     software, but we are expected to ignore this discrepancy.)

     To those who propose this as an ethical axiom--the author is more
     important than you--I can only say that I, a notable software
     author myself, call it bunk.

     But people in general are only likely to feel any sympathy with
     the natural rights claims for two reasons.

     One reason is an overstretched analogy with material objects. When
     I cook spaghetti, I do object if someone else eats it, because
     then I cannot eat it. His action hurts me exactly as much as it
     benefits him; only one of us can eat the spaghetti, so the
     question is, which? The smallest distinction between us is enough
     to tip the ethical balance.

     But whether you run or change a program I wrote affects you
     directly and me only indirectly. Whether you give a copy to your
     friend affects you and your friend much more than it affects me. I
     shouldn't have the power to tell you not to do these things. No
     one should.

     The second reason is that people have been told that natural
     rights for authors is the accepted and unquestioned tradition of
     our society.

     As a matter of history, the opposite is true. The idea of natural
     rights of authors was proposed and decisively rejected when the US
     Constitution was drawn up. That's why the Constitution only
     permits a system of copyright and does not require one; that's why
     it says that copyright must be temporary. It also states that the
     purpose of copyright is to promote progress--not to reward
     authors. Copyright does reward authors somewhat, and publishers
     more, but that is intended as a means of modifying their behavior.

     The real established tradition of our society is that copyright
     cuts into the natural rights of the public--and that this can only
     be justified for the public's sake.

   * *Economics* The final argument made for having owners of software
     is that this leads to production of more software.

     Unlike the others, this argument at least takes a legitimate
     approach to the subject. It is based on a valid goal--satisfying
     the users of software. And it is empirically clear that people
     will produce more of something if they are well paid for doing so.

     But the economic argument has a flaw: it is based on the
     assumption that the difference is only a matter of how much money
     we have to pay. It assumes that "production of software" is what
     we want, whether the software has owners or not.

     People readily accept this assumption because it accords with our
     experiences with material objects.  Consider a sandwich, for
     instance. You might well be able to get an equivalent sandwich
     either free or for a price. If so, the amount you pay is the only
     difference.  Whether or not you have to buy it, the sandwich has
     the same taste, the same nutritional value, and in either case you
     can only eat it once. Whether you get the sandwich from an owner
     or not cannot directly affect anything but the amount of money you
     have afterwards.

     This is true for any kind of material object--whether or not it
     has an owner does not directly affect what it is, or what you can
     do with it if you acquire it.

     But if a program has an owner, this very much affects what it is,
     and what you can do with a copy if you buy one. The difference is
     not just a matter of money. The system of owners of software
     encourages software owners to produce something--but not what
     society really needs. And it causes intangible ethical pollution
     that affects us all.

     What does society need? It needs information that is truly
     available to its citizens--for example, programs that people can
     read, fix, adapt, and improve, not just operate. But what software
     owners typically deliver is a black box that we can't study or
     change.

     Society also needs freedom. When a program has an owner, the users
     lose freedom to control part of their own lives.

     And above all society needs to encourage the spirit of voluntary
     cooperation in its citizens. When software owners tell us that
     helping our neighbors in a natural way is "piracy", they pollute
     our society's civic spirit.

     This is why we say that free software is a matter of freedom, not
     price.

     The economic argument for owners is erroneous, but the economic
     issue is real. Some people write useful software for the pleasure
     of writing it or for admiration and love; but if we want more
     software than those people write, we need to raise funds.

     For ten years now, free software developers have tried various
     methods of finding funds, with some success.  There's no need to
     make anyone rich; the median US family income, around $35k, proves
     to be enough incentive for many jobs that are less satisfying than
     programming.

     For years, until a fellowship made it unnecessary, I made a living
     from custom enhancements of the free software I had written. Each
     enhancement was added to the standard released version and thus
     eventually became available to the general public. Clients paid me
     so that I would work on the enhancements they wanted, rather than
     on the features I would otherwise have considered highest priority.

     The Free Software Foundation (FSF), a tax-exempt charity for free
     software development, raises funds by selling GNU CD-ROMs,
     T-shirts, manuals, and deluxe distributions, (all of which users
     are free to copy and change), as well as from donations. It now
     has a staff of five programmers, plus three employees who handle
     mail orders.

     Some free software developers make money by selling support
     services. Cygnus Support, with around 50 employees [when this
     article was written], estimates that about 15 per cent of its
     staff activity is free software development--a respectable
     percentage for a software company.

     Companies including Intel, Motorola, Texas Instruments and Analog
     Devices have combined to fund the continued development of the
     free GNU compiler for the language C. Meanwhile, the GNU compiler
     for the Ada language is being funded by the US Air Force, which
     believes this is the most cost-effective way to get a high quality
     compiler. [Air Force funding ended some time ago; the GNU Ada
     Compiler is now in service, and its maintenance is funded
     commercially.]

     All these examples are small; the free software movement is still
     small, and still young. But the example of listener-supported
     radio in this country [the US] shows it's possible to support a
     large activity without forcing each user to pay.

   As a computer user today, you may find yourself using a proprietary
program. If your friend asks to make a copy, it would be wrong to
refuse. Cooperation is more important than copyright. But underground,
closet cooperation does not make for a good society. A person should
aspire to live an upright life openly with pride, and this means saying
"No" to proprietary software.

   You deserve to be able to cooperate openly and freely with other
people who use software. You deserve to be able to learn how the
software works, and to teach your students with it. You deserve to be
able to hire your favorite programmer to fix it when it breaks.

   You deserve free software.


File: toolsmanual.info,  Node: Why free software needs free documentation,  Next: Categories of software,  Prev: Why software should not have owners,  Up: Philosophical issues

B.4 Why free software needs free documentation
==============================================

The biggest deficiency in free operating systems is not in the
software-it is the lack of good free manuals that we can include in
these systems. Many of our most important programs do not come with
full manuals. Documentation is an essential part of any software
package; when an important free software package does not come with a
free manual, that is a major gap. We have many such gaps today.

   Once upon a time, many years ago, I thought I would learn Perl. I
got a copy of a free manual, but I found it hard to read. When I asked
Perl users about alternatives, they told me that there were better
introductory manuals-but those were not free.

   Why was this? The authors of the good manuals had written them for
O'Reilly Associates, which published them with restrictive terms-no
copying, no modification, source files not available-which exclude them
from the free software community.

   That wasn't the first time this sort of thing has happened, and (to
our community's great loss) it was far from the last. Proprietary manual
publishers have enticed a great many authors to restrict their manuals
since then. Many times I have heard a GNU user eagerly tell me about a
manual that he is writing, with which he expects to help the GNU
project-and then had my hopes dashed, as he proceeded to explain that
he had signed a contract with a publisher that would restrict it so that
we cannot use it.

   Given that writing good English is a rare skill among programmers, we
can ill afford to lose manuals this way.

   Free documentation, like free software, is a matter of freedom, not
price.  The problem with these manuals was not that O'Reilly Associates
charged a price for printed copies-that in itself is fine. (The Free
Software Foundation sells printed copies of free GNU manuals, too.)
But GNU manuals are available in source code form, while these manuals
are available only on paper. GNU manuals come with permission to copy
and modify; the Perl manuals do not. These restrictions are the
problems.

   The criterion for a free manual is pretty much the same as for free
software: it is a matter of giving all users certain freedoms.
Redistribution (including commercial redistribution) must be permitted,
so that the manual can accompany every copy of the program, on-line or
on paper. Permission for modification is crucial too.

   As a general rule, I don't believe that it is essential for people
to have permission to modify all sorts of articles and books. The
issues for writings are not necessarily the same as those for software.
For example, I don't think you or I are obliged to give permission to
modify articles like this one, which describe our actions and our views.

   But there is a particular reason why the freedom to modify is
crucial for documentation for free software. When people exercise their
right to modify the software, and add or change its features, if they
are conscientious they will change the manual too-so they can provide
accurate and usable documentation with the modified program. A manual
which forbids programmers to be conscientious and finish the job, or
more precisely requires them to write a new manual from scratch if they
change the program, does not fill our community's needs.

   While a blanket prohibition on modification is unacceptable, some
kinds of limits on the method of modification pose no problem. For
example, requirements to preserve the original author's copyright
notice, the distribution terms, or the list of authors, are ok. It is
also no problem to require modified versions to include notice that
they were modified, even to have entire sections that may not be
deleted or changed, as long as these sections deal with nontechnical
topics. (Some GNU manuals have them.)

   These kinds of restrictions are not a problem because, as a practical
matter, they don't stop the conscientious programmer from adapting the
manual to fit the modified program. In other words, they don't block the
free software community from doing its thing with the program and the
manual together.

   However, it must be possible to modify all the technical content of
the manual; otherwise, the restrictions do block the community, the
manual is not free, and so we need another manual.

   Unfortunately, it is often hard to find someone to write another
manual when a proprietary manual exists. The obstacle is that many
users think that a proprietary manual is good enough-so they don't see
the need to write a free manual. They do not see that the free
operating system has a gap that needs filling.

   Why do users think that proprietary manuals are good enough? Some
have not considered the issue. I hope this article will do something to
change that.

   Other users consider proprietary manuals acceptable for the same
reason so many people consider proprietary software acceptable: they
judge in purely practical terms, not using freedom as a criterion. These
people are entitled to their opinions, but since those opinions spring
from values which do not include freedom, they are no guide for those
of us who do value freedom.

   Please spread the word about this issue. We continue to lose manuals
to proprietary publishing. If we spread the word that proprietary
manuals are not sufficient, perhaps the next person who wants to help
GNU by writing documentation will realize, before it is too late, that
he must above all make it free.

   We can also encourage commercial publishers to sell free, copylefted
manuals instead of proprietary ones. One way you can help this is to
check the distribution terms of a manual before you buy it, and prefer
copylefted manuals to non-copylefted ones.


File: toolsmanual.info,  Node: Categories of software,  Next: Confusing words,  Prev: Why free software needs free documentation,  Up: Philosophical issues

B.5 Categories of software
==========================

Here is a glossary of various categories of software that are often
mentioned in discussions of free software. It explains which categories
overlap or are part of other categories.

   * *Free software*: Free software is software that comes with
     permission for anyone to use, copy, and distribute, either
     verbatim or with modifications, either gratis or for a fee. In
     particular, this means that source code must be available. "If
     it's not source, it's not software."

     If a program is free, then it can potentially be included in a free
     operating system such as GNU, or free GNU/Linux systems .

     There are many different ways to make a program free--many
     questions of detail, which could be decided in more than one way
     and still make the program free. Some of the possible variations
     are described below.

     Free software is a matter of freedom, not price. But proprietary
     software companies sometimes use the term "free software" to refer
     to price. Sometimes they mean that you can obtain a binary copy at
     no charge; sometimes they mean that a copy is included on a
     computer that you are buying. This has nothing to do with what we
     mean by free software in the GNU project.

     Because of this potential confusion, when a software company says
     its product is free software, always check the actual distribution
     terms to see whether users really have all the freedoms that free
     software implies. Sometimes it really is free software; sometimes
     it isn't.

     Many languages have two separate words for "free" as in freedom
     and "free" as in zero price. For example, French has "libre" and
     "gratuit". English has a word "gratis" that refers unambiguously
     to price, but no common adjective that refers unambiguously to
     freedom. This is unfortunate, because such a word would be useful
     here.

     Free software is often more reliable than non-free software.

   * *Open Source software*: The term "open source" software is used by
     some people to mean more or less the same thing as free software.

   * *Public domain software*: Public domain software is software that
     is not copyrighted. It is a special case of non-copylefted free
     software, which means that some copies or modified versions may
     not be free at all.

     Sometimes people use the term "public domain" in a loose fashion
     to mean "free" or "available gratis." However, "public domain" is
     a legal term and means, precisely, "not copyrighted". For clarity,
     we recommend using "public domain" for that meaning only, and
     using other terms to convey the other meanings.

   * *Copylefted software*: Copylefted software is free software whose
     distribution terms do not let redistributors add any additional
     restrictions when they redistribute or modify the software. This
     means that every copy of the software, even if it has been
     modified, must be free software.

     In the GNU Project, we copyleft almost all the software we write,
     because our goal is to give every user the freedoms implied by the
     term "free software." See Copylefted for more explanation of how
     copyleft works and why we use it.

     Copyleft is a general concept; to actually copyleft a program, you
     need to use a specific set of distribution terms. There are many
     possible ways to write copyleft distribution terms.

   * *Non-copylefted free software*: Non-copylefted free software comes
     from the author with permission to redistribute and modify, and
     also to add additional restrictions to it.

     If a program is free but not copylefted, then some copies or
     modified versions may not be free at all. A software company can
     compile the program, with or without modifications, and distribute
     the executable file as a proprietary software product.

     The X Window System illustrates this. The X Consortium releases
     X11 with distribution terms that make it non-copylefted free
     software. If you wish, you can get a copy which has those
     distribution terms and is free. However, there are non-free
     versions as well, and there are popular workstations and PC
     graphics boards for which non-free versions are the only ones that
     work. If you are using this hardware, X11 is not free software for
     you.

   * *GPL-covered software*: The GNU GPL is one specific set of
     distribution terms for copylefting a program. The GNU Project uses
     it as the distribution terms for most GNU software.

   * *The GNU system*: The GNU system is a complete free Unix-like
     operating system.

     A Unix-like operating system consists of many programs. We have
     been accumulating components for this system since 1984; the first
     test release of a "complete GNU system" was in 1996.  We hope that
     in a year or so this system will be mature enough to recommend it
     for ordinary users.

     The GNU system includes all the GNU software, as well as many
     other packages such as the X Window System and TeX which are not
     GNU software.

     Since the purpose of GNU is to be free, every single component in
     the GNU system has to be free software. They don't all have to be
     copylefted, however; any kind of free software is legally suitable
     to include if it helps meet technical goals. We can and do use
     non-copylefted free software such as the X Window System.

   * *GNU software*: GNU software is software that is released under
     the auspices of the GNU Project. Most GNU software is copylefted,
     but not all; however, all GNU software must be free software.

     Some GNU software is written by staff of the Free Software
     Foundation, but most GNU software is contributed by volunteers.
     Some contributed software is copyrighted by the Free Software
     Foundation; some is copyrighted by the contributors who wrote it.

   * *Semi-free software*: Semi-free software is software that is not
     free, but comes with permission for individuals to use, copy,
     distribute, and modify (including distribution of modified
     versions) for non-profit purposes. PGP is an example of a
     semi-free program.

     Semi-free software is much better than proprietary software, but
     it still poses problems, and we cannot use it in a free operating
     system.

     The restrictions of copyleft are designed to protect the essential
     freedoms for all users. For us, the only justification for any
     substantive restriction on using a program is to prevent other
     people from adding other restrictions. Semi-free programs have
     additional restrictions, motivated by purely selfish goals.

     It is impossible to include semi-free software in a free operating
     system. This is because the distribution terms for the operating
     system as a whole are the conjunction of the distribution terms
     for all the programs in it. Adding one semi-free program to the
     system would make the system as a whole just semi-free. There are
     two reasons we do not want that to happen:
        * We believe that free software should be for
          everyone-including businesses, not just schools and
          hobbyists. We want to invite business to use the whole GNU
          system, and therefore we must not include a semi-free program
          in it.

        * Commercial distribution of free operating systems, including
          Linux-based GNU systems, is very important, and users
          appreciate being able to buy commercial CD-ROM distributions.
          Including one semi-free program in an operating system would
          cut off commercial CD-ROM distribution for it.
     The Free Software Foundation itself is non-commercial, and
     therefore we would be legally permitted to use a semi-free program
     "internally". But we don't do that, because that would undermine
     our efforts to obtain a program which we could also include in GNU.

     If there is a job that needs doing with software, then until we
     have a free program to do the job, the GNU system has a gap.  We
     have to tell volunteers, "We don't have a program yet to do this
     job in GNU, so we hope you will write one." If we ourselves used a
     semi-free program to do the job, that would undermine what we say;
     it would take away the impetus (on us, and on others who might
     listen to our views) to write a free replacement. So we don't do
     that.

   * *Proprietary software*: Proprietary software is software that is
     not free or semi-free.  Its use, redistribution or modification is
     prohibited, or requires you to ask for permission, or is
     restricted so much that you effectively can't do it freely.

     The Free Software Foundation follows the rule that we cannot
     install any proprietary program on our computers except
     temporarily for the specific purpose of writing a free replacement
     for that very program. Aside from that, we feel there is no
     possible excuse for installing a proprietary program.

     For example, we felt justified in installing Unix on our computer
     in the 1980s, because we were using it to write a free replacement
     for Unix. Nowadays, since free operating systems are available,
     the excuse is no longer applicable; we have eliminated all our
     non-free operating systems, and any new computer we install must
     run a completely free operating system.

     We don't insist that users of GNU, or contributors to GNU, have to
     live by this rule. It is a rule we made for ourselves. But we hope
     you will decide to follow it too.

   * *Freeware*: The term "freeware" has no clear accepted definition,
     but it is commonly used for packages which permit redistribution
     but not modification (and their source code is not available).
     These packages are not free software, so please don't use
     "freeware" to refer to free software.

   * *Shareware*: Shareware is software which comes with permission for
     people to redistribute copies, but says that anyone who continues
     to use a copy is required to pay a license fee.

     Shareware is not free software, or even semi-free. There are two
     reasons it is not:
        * For most shareware, source code is not available; thus you
          cannot modiy the program at all.

        * Shareware does not come with permission to make a copy and
          install it without paying a license fee, not even for
          individuals engaging in nonprofit activity. (In practice,
          people often disregard the distribution terms and do this
          anyway, but the terms don't permit it.)

   * *Commercial Software*: Commercial software is software being
     developed by a business which aims to make money from the use of
     the software.  "Commercial" and "proprietary" are not the same
     thing! Most commercial software is proprietary , but there is
     commercial free software, and there is non-commercial non-free
     software.

     For example, GNU Ada is always distributed under the terms of the
     GNU GPL, and every copy is free software; but its developers sell
     support contracts. When their salesmen speak to prospective
     customers, sometimes the customers say, "We would feel safer with
     a commercial compiler." The salesmen reply, "GNU Ada is a
     commercial compiler; it happens to be free software."

     For the GNU Project, the emphasis is in the other order: the
     important thing is that GNU Ada is free software; whether it is
     commercial is not a crucial question. However, the additional
     development of GNU Ada that results from the business that
     supports it is definitely beneficial.


File: toolsmanual.info,  Node: Confusing words,  Prev: Categories of software,  Up: Philosophical issues

B.6 Confusing words
===================

There are a number of words and phrases which we recommend avoiding,
either because they are ambiguous or because they imply an opinion that
we hope you may not entirely agree with.

   * *For free*: If you want to say that a program is free software,
     please don't say that it is available "for free." That term
     specifically means "for zero price."  Free software is a matter of
     freedom, not price.

     Free software is often available for free-for example, on many FTP
     servers. But free software copies are also available for a price on
     CD-ROMs, and proprietary software copies may occasionally be
     available for free.

     To avoid confusion, you can say that the program is available "as
     free software".

   * *Freeware*: Please don't use the term "freeware" as a synonym for
     "free software." The term "freeware" was used often in the 1980s
     for programs released only as executables, with source code not
     available.  Today it has no clear definition.

   * *Give away software*: It's misleading to use the term "give away"
     to mean "distribute a program as free software." It has the same
     problem as "for free": it implies the issue is price, not freedom.
     One way to avoid the confusion is to say "release as free
     software".

   * *Intellectual property*: Publishers and lawyers like to describe
     copyright as "intellectual property." This term carries a hidden
     assumption--that the most natural way to think about the issue of
     copying is based on an analogy with physical objects, and our
     ideas of them as property.

     But this analogy overlooks the crucial difference between material
     objects and information: information can be copied and shared
     almost effortlessly, while material objects can't be. Basing your
     thinking on this analogy is tantamount to ignoring that difference.

     Even the US legal system does not entirely accept this analogy,
     since it does not treat copyrights just like physical object
     property rights.

     If you don't want to limit yourself to this way of thinking, it is
     best to avoid using the term "intellectual property" in your words
     and thoughts.

     Another problem with "intellectual property" is that it is an
     attempt to generalize about several legal systems, including
     copyright, patents, and trademarks, which are much more different
     than similar. Unless you have studied these areas of law and you
     know the differences, lumping them together will surely lead you
     to incorrect generalizations.

     To avoid confusion, it is best not to look for alternative way of
     saying "intellectual property." Instead, talk about copyright,
     patents, or whichever specific legal system is the issue.

   * *Piracy*: Publishers often refer to prohibited copying as
     "piracy." In this way, they imply that illegal copying is
     ethically equivalent to attacking ships on the high seas,
     kidnaping and murdering the people on them.

     If you don't believe that illegal copying is just like kidnaping
     and murder, you might prefer not to use the word "piracy" to
     describe it. Neutral terms such as "prohibited copying" or
     "illegal copying" are available for use instead. Some of us might
     even prefer to use a positive term such as "sharing information
     with your neighbor."

   * *Protection*: Publishers' lawyers love to use the term
     "protection" to describe copyright. This word carries the
     implication of preventing destruction or suffering; therefore, it
     encourages people to identify with the owner and publisher who
     benefit from copyright, rather than with the users who are
     restricted by it.

     It is easy to avoid "protection" and use neutral terms instead. For
     example, instead of "Copyright protection lasts a very long time,"
     you can say, "Copyright lasts a very long time."

   * *Sell software*: The term "sell software" is ambiguous. Strictly
     speaking, exchanging a copy of a free program for a sum of money
     is "selling"; but people usually associate the term "sell" with
     proprietary restrictions on the subsequent use of the software.
     You can be more precise, and prevent confusion, by saying either
     "distributing copies of a program for a fee" or "imposing
     proprietary restrictions on the use of a program," depending on
     what you mean.

   * *Theft*: Copyright apologists often use words like "stolen" and
     "theft" to describe copyright infringement. At the same time, they
     ask us to treat the legal system as an authority on ethics: if
     copying is forbidden, it must be wrong.

     So it is pertinent to mention that the legal system-at least in the
     US-rejects the idea that copyright infringement is "theft".
     Copyright advocates who use terms like "stolen" are
     misrepresenting the authority that they appeal to.

     The idea that laws decide what is right or wrong is mistaken in
     general.  Laws are, at their best, an attempt to achieve justice;
     to say that laws define justice or ethical conduct is turning
     things upside down.


File: toolsmanual.info,  Node: Licensing Free Software,  Next: GNU GENERAL PUBLIC LICENSE,  Prev: Philosophical issues,  Up: Top

Appendix C Licensing Free Software
**********************************

The following articles by Richard Stallman describe how we license free
software in our community. The text of these articles in included here
with permission under the following terms:

   *Copying Notice*
     Copyright (C) 1998 Free Software Foundation Inc
     59 Temple Place, Suite 330, Boston, MA 02111, USA
     Verbatim copying and distribution is permitted in any medium,
     provided this notice is preserved.

   An exception is the article in *note Why you should use the GPL::.
This article was written by Eleftherios Gkioulekas to make this appendix
more self contained and you may copy it under the following terms:

   *Copying Notice*
     Copyright (C) 1998 Eleftherios Gkioulekas
     Verbatim copying and distribution is permitted in any medium,
     provided this notice is preserved.

* Menu:

* What is Copyleft::
* Why you should use the GPL::
* The LGPL vs the GPL::


File: toolsmanual.info,  Node: What is Copyleft,  Next: Why you should use the GPL,  Prev: Licensing Free Software,  Up: Licensing Free Software

C.1 What is Copyleft
====================

The simplest way to make a program free is to put it in the public
domain, uncopyrighted. This allows people to share the program and
their improvements, if they are so minded. But it also allows
uncooperative people to convert the program into proprietary software.
They can make changes, many or few, and distribute the result as a
proprietary product. People who receive the program in that modified
form do not have the freedom that the original author gave them; the
middleman has stripped it away.

   In the GNU project, our aim is to give all users the freedom to
redistribute and change GNU software. If middlemen could strip off the
freedom, we might have many users, but those users would not have
freedom. So instead of putting GNU software in the public domain, we
"copyleft" it. Copyleft says that anyone who redistributes the
software, with or without changes, must pass along the freedom to
further copy and change it. Copyleft guarantees that every user has
freedom.

   Copyleft also provides an incentive for other programmers to add to
free software. Important free programs such as the GNU C++ compiler
exist only because of this.

   Copyleft also helps programmers who want to contribute improvements
to free software get permission to do that. These programmers often work
for companies or universities that would do almost anything to get more
money. A programmer may want to contribute her changes to the
community, but her employer may want to turn the changes into a
proprietary software product.

   When we explain to the employer that it is illegal to distribute the
improved version except as free software, the employer usually decides
to release it as free software rather than throw it away.

   To copyleft a program, first we copyright it; then we add
distribution terms, which are a legal instrument that gives everyone
the rights to use, modify, and redistribute the program's code or any
program derived from it but only if the distribution terms are
unchanged.  Thus, the code and the freedoms become legally inseparable.

   Proprietary software developers use copyright to take away the users'
freedom; we use copyright to guarantee their freedom. That's why we
reverse the name, changing "copyright" into "copyleft."

   Copyleft is a general concept; there are many ways to fill in the
details. In the GNU Project, the specific distribution terms that we
use are contained in the GNU General Public License (GNU GPL).  An
alternate form, the GNU Library General Public License (GNU LGPL),
applies to a few (but not all) GNU libraries. The license permits
linking the libraries into proprietary executables under certain
conditions.

   The appropriate license is included in many manuals and in each GNU
source code distribution (usually in files named `COPYING' and
`COPYING.LIB').

   The GNU GPL is designed so that you can easily apply it to your own
program if you are the copyright holder. You don't have to modify the
GNU GPL to do this, just add notices to your program which refer
properly to the GNU GPL.

   If you would like to copyleft your program with the GNU GPL, please
see the instructions at the end of the GPL text. If you would like to
copyleft your library with the GNU LGPL, please see the instructions at
the end of the LGPL text (note you can also use the ordinary GPL for
libraries).

   Using the same distribution terms for many different programs makes
it easy to copy code between various different programs. Since they all
have the same distribution terms, there is no need to think about
whether the terms are compatible. The Library GPL includes a provision
that lets you alter the distribution terms to the ordinary GPL, so that
you can copy code into another program covered by the GPL.


File: toolsmanual.info,  Node: Why you should use the GPL,  Next: The LGPL vs the GPL,  Prev: What is Copyleft,  Up: Licensing Free Software

C.2 Why you should use the GPL
==============================

The GPL is not the only way to implement copyleft. However, as a
practical matter, it is convenient to standardize on using the GPL to
copyleft software because that allows to copy source code from
copylefted programs and use it on other copylefted programs without
worrying about license compatibility.

   If you want your program to be free, then GPL grants all the
permissions that are necessary to make it free. Some people do not like
the GPL because they feel it gives too many permissions. In that case,
these people do not really want their program to be free. When they
choose to use a more restrictive license, as a result, they are
effectively choosing not to be part of the free software community.

   One very common restriction, that often comes up, is to allow free
use only for "non-commercial" purposes. The idea behind such a
restriction is to prevent anyone from making any money without giving
you a cut of their profit. Copyleft actually also serves this goal, but
from a different angle.  The angle is that making money is only one of
the many benefits that one can derive from using a computer program,
and it should not be discriminated against all the other benefits.
Copyleft however does prevent others from making money by modifying
your program and distributing it as proprietary software with
restrictive licensing. If person wants to distribute the program,
person also has to distribute the source code, in which case you benefit
by having access to per _modifications_, or person has to negotiate
with you for special terms.

   Another peculiar restriction that often comes up is allowing use and
modification but _requiring_ the redistribution of any modified
versions.  The reason why this is a peculiar restriction is because at
first sight, it doesn't sound that bad; it does sound like free
software.  The advocates of this idea explain that there are certain
situations where it is very anti-social to make a useful modification
on a free program, use the program and benefit from it, and not release
it. However, if you legally require your users to release any
modifications they make, then this creates another problem, especially
when this requirement conflicts with privacy rights.  The public should
be free to redistribute your program, but they should also be free to
choose not to redistribute the program at all.  The fundamental idea
behind copylefted works is that they are owned by the public. But, "the
public" is the individual, as much as it is the entire community.
Copyleft protects the community by forbidding hoarding, but the
individual also deserves an equivalent protection; the protection of
both their privacy and their freedom.

   Some developers, who do want to be part of our community, use
licenses that do not restrict any of our freedoms but which ask for a
"favor" from the user. An example of such a favor is to request that
you change the name of the program if you modify it, or to not use the
name of some organization in advertising. There is nothing ethically
wrong with asking for such favors. Requiring them legally however
creates a serious problem; it makes their terms incompatible with the
terms of the GPL.  It is very inefficient to inflict the price of such
an incompatibility on our community for the sake of a favor. Instead,
in almost all cases, it is just as good an idea to ask for such favors
in the documentation distributed with the program, where there is more
latitude in what restrictions you can impose (*note Why free software
needs free documentation::).

   Some people complain that the GPL is "too restrictive" because it
says no to software hoarding.  They say that this makes the program
"less free". They say that "free flow of ideas" means that you should
not say no to anyone.  If you would like to give your users more
permissions, than provided by the GPL, all you need to do is append the
text of these permissions to the copyright notices that you attach to
every file; there is no need to write a new license from scratch. You
can do this, if you are the original author of the file. For files that
were written by others, you need their permission. In general, however,
doing this is not a good idea.

   The GPL has been very carefully thought-out to only give permissions
that give _freedom_ to the users, without allowing any permissions that
would give _power_ to some users to take freedom from all of the other
users. As a result, even though the terms say no to certain things,
doing so guarantees that the program remains free for all the users in
our community. The US constitution guarantees some of our rights by
making them "inalienable". This means that no-one, not even the person
entitled to the rights, is allowed to waive them. For example, you can't
waive your right to freedom and sell yourself as a slave. While this can
be seen as a restriction in terms of what you are allowed to do, the
effect is that this restriction gives you more freedom. It is not _you_
that the restriction really is targetting, but all the people, that
have power over you, that might have an interest in taking your freedom
away.

   In many countries, other than the US, copyright law is not strictly
enforced. As a result, the citizens in these countries can afford not
to care about copyright. However, the free software community trascends
nations and borders, and many of us do not have the same latitude.  So,
if you write a program that you want to share with other people, please
be clear about the copyright terms. The easiest way to do this is by
applying the terms of the GPL.


File: toolsmanual.info,  Node: The LGPL vs the GPL,  Prev: Why you should use the GPL,  Up: Licensing Free Software

C.3 The LGPL vs the GPL
=======================

The GNU Project has two principal licenses to use for libraries.  One
is the GNU Library GPL; the other is the ordinary GNU GPL.  The choice
of license makes a big difference: using the Library GPL permits use of
the library in proprietary programs; using the ordinary GPL for a
library makes it available only for free programs.

   Which license is best for a given library is a matter of strategy,
and it depends on the details of the situation.  At present, most GNU
libraries are covered by the Library GPL, and that means we are using
only one of these two strategies, neglecting the other.  So we are now
seeking more libraries to release _under the ordinary GPL_.

   Proprietary software developers have the advantage of money; free
software developers need to make advantages for each other.  Using the
ordinary GPL for a library gives free software developers an advantage
over proprietary developers: a library that they can use, while
proprietary developers cannot use it.

   Using the ordinary GPL is not advantageous for every library.  There
are reasons that can make it better to use the Library GPL in certain
cases.  The most common case is when a free library's features are
readily available for proprietary software through other alternative
libraries.  In that case, the library cannot give free software any
particular advantage, so it is better to use the Library GPL for that
library.

   This is why we used the Library GPL for the GNU C library.  After
all, there are plenty of other C libraries; using the GPL for ours would
have driven proprietary software developers to use another-no problem
for them, only for us.

   However, when a library provides a significant unique capability,
like GNU Readline, that's a horse of a different color.  The Readline
library implements input editing and history for interactive programs,
and that's a facility not generally available elsewhere.  Releasing it
under the GPL and limiting its use to free programs gives our community
a real boost.  At least one application program is free software today
specifically because that was necessary for using Readline.

   If we amass a collection of powerful GPL-covered libraries that have
no parallel available to proprietary software, they will provide a
range of useful modules to serve as building blocks in new free
programs.  This will be a significant advantage for further free
software development, and some projects will decide to make software
free in order to use these libraries.  University projects can easily
be influenced; nowadays, as companies begin to consider making software
free, even some commercial projects can be influenced in this way.

   Proprietary software developers, seeking to deny the free competition
an important advantage, will try to convince authors not to contribute
libraries to the GPL-covered collection.  For example, they may appeal
to the ego, promising "more users for this library" if we let them use
the code in proprietary software products.  Popularity is tempting, and
it is easy for a library developer to rationalize the idea that
boosting the popularity of that one library is what the community needs
above all.

   But we should not listen to these temptations, because we can achieve
much more if we stand together.  We free software developers should
support one another.  By releasing libraries that are limited to free
software only, we can help each other's free software packages outdo
the proprietary alternatives.  The whole free software movement will
have more popularity, because free software as a whole will stack up
better against the competition.

   Since the name "Library GPL" conveys the wrong idea about this
question, we are planning to change the name to "Lesser GPL."  Actually
implementing the name change may take some time, but you don't have to
wait-you can release GPL-covered libraries now.


File: toolsmanual.info,  Node: GNU GENERAL PUBLIC LICENSE,  Prev: Licensing Free Software,  Up: Top

Appendix D GNU GENERAL PUBLIC LICENSE
*************************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

D.1 Preamble
============

The licenses for most software are designed to take away your freedom
to share and change it.  By contrast, the GNU General Public License is
intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY
 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS
D.2 Appendix: How to Apply These Terms to Your New Programs
===========================================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
     02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.



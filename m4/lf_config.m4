dnl Copyright (C) 1998 Eleftherios Gkioulekas <lf@amath.washington.edu>
dnl  
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl  
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl  
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
dnl  
dnl As a special exception to the GNU General Public License, if you
dnl distribute this file as part of a program that contains a configuration
dnl script generated by Autoconf, you may include it under the same
dnl distribution terms that you use for the rest of that program.
dnl  

dnl General usage tips
dnl ------------------
dnl 
dnl The package that installs a library must invoke something like
dnl this in their configure.in:
dnl   LF_INSTALLS_LIBRARY(foo, [ $FOO_LDFLAGS ] , 
dnl                            [ $FOO_LDADD ] , [ $FOO_CFLAGS ])
dnl where FOO_LDFLAGS -> are the -L/-R flags
dnl       FOO_LDADD   -> are the -l flags
dnl       FOO_CFLAGS  -> are the -I flags
dnl It is of course the responsibility of the configure.in script to
dnl give values to these variables.
dnl After sufficient invokations to this macro for each library, the 
dnl configure.in must invoke:
dnl   LF_CONFIG_SCRIPT
dnl
dnl The package that uses the library must query the config script installed
dnl with the library to obtain the linking information.
dnl First note that libraries are installed by packages of libraries.
dnl A "library package" may install very many different libraries.
dnl Every "library package" corresponds to a config script for that package
dnl First we must query that config script:
dnl   LF_NEED_LIBRARY_PACKAGE(FOO_CONFIG,foo-config,1.9)
dnl where FOO_CONFIG is a symbol that will contain the path to the config
dnl script. "foo-config" is the name of the config script. 
dnl 1.9 is the required version. This macro locates the config script
dnl and does version negotiation. If all is okey then we go ahead.
dnl Now call:
dnl   LF_QUERY_LIBRARY(lib1,FOO_CONFIG, LIB1_LDFLAGS, LIB1_LDADD, LIB1_CFLAGS)
dnl and you are in bussiness. Instead of lib1 you can request a combination
dnl of libraries or other libraries.

dnl ----------------------------------------------------------------------
dnl Usage:
dnl   LF_INSTALLS_LIBRARY(libname,libdir,libs,includedir,description)
dnl If your package will be installing a library, then provide the
dnl following information:
dnl libname    -> A characteristic name for library
dnl libdir     -> The -L/-R flags required to link library
dnl libs       -> The -l flags required to link library
dnl includedir -> The -I flags required to include headers for library
dnl ----------------------------------------------------------------------

AC_DEFUN([LF_INSTALLS_LIBRARY],[
  lf_config_LIBRARIES="$lf_config_LIBRARIES $1"
  lf_config_$1_FIELDS="$1:$2:$3:$4:$5"
])

dnl -----------------------------------------------------------------------
dnl Usage:
dnl   LF_CONFIG_SCRIPT
dnl Invoke after you are finished invoking the appropriate calls to
dnl LF_INSTALL_LIBRARY
dnl This will create a file called "config-database" and will define
dnl @CONFIGDATABASE@ to substitute the contents of that file to the
dnl template for the config script.
dnl -----------------------------------------------------------------------
AC_DEFUN([LF_CONFIG_SCRIPT],[
  dnl# Clear up the database file:
  rm -f config-database
  touch config-database

  dnl# Record the LIBRARIES entry:
  echo "LIBRARIES=\"${lf_config_LIBRARIES}\"" >> config-database
  
  dnl# Now loop over and create entries for individual libraries:
  for lf_config_library in $lf_config_LIBRARIES
  do
    AC_MSG_RESULT([registering library ${lf_config_library}])
     echo "`eval \"eval echo '$'lf_config_${lf_config_library}_FIELDS\"`" | 
      awk -F: '{ printf("%s_LIBDIR=\"%s\"\n",[$]1,[$]2)
                 printf("%s_LIBS=\"%s\"\n",[$]1,[$]3)
                 printf("%s_INCLUDEDIR=\"%s\"\n",[$]1,[$]4)
                 printf("%s_DESCRIPTION=\"%s\"\n",[$]1,[$]5) }' >> config-database
 done

  dnl# Now punch in the database:
  CONFIGDATABASE="./config-database"
  AC_SUBST_FILE(CONFIGDATABASE)
])

dnl#-----------------------------------------------------------------------
dnl Usage:
dnl   LF_NEED_LIBRARY_PACKAGE(FOO_CONFIG,config-script,version)
dnl Negotiate whether we have a recent enough version of a desired collection
dnl of libraries.
dnl#-----------------------------------------------------------------------

AC_DEFUN([LF_NEED_LIBRARY_PACKAGE],[
  dnl Check whether the config script exists
  AC_PATH_PROG($1,$2,no)
  if test "x[$]$1" = "xno"
  then
    echo "** The $2 script installed by the corresponding library package"
    echo "** could not be found. If you did install this package, please"
    echo "** make sure that PREFIX/bin is in your path and try again."
    exit 1
  else
    AC_MSG_CHECKING(for $2 - version >= $3)
    dnl Get the version number of the installed version
    lf_major_installed="`[$]$1 --version | awk -F. '{ print [$]1 }'`"
    lf_minor_installed="`[$]$1 --version | awk -F. '{ print [$]2 }'`"
    lf_micro_installed="`[$]$1 --version | awk -F. '{ print [$]3 }'`"
    if test -z "$lf_micro_installed"
    then
      lf_micro_installed=0
    fi
    dnl Get the version number of the version that is required
    lf_major_required="`echo $3 | awk -F. '{ print [$]1 }'`"
    lf_minor_required="`echo $3 | awk -F. '{ print [$]2 }'`"
    lf_micro_required="`echo $3 | awk -F. '{ print [$]3 }'`"
    if test -z "$lf_micro_required"
    then
      lf_micro_required=0
    fi
#    echo "inst $lf_major_installed $lf_minor_installed $lf_micro_installed"
#    echo "req  $lf_major_required $lf_minor_required $lf_micro_required"
    dnl Now some magic to compare the version numbers
    AC_TRY_RUN([
#include <stdio.h>
int
main()
{
  int major_installed = $lf_major_installed;
  int minor_installed = $lf_minor_installed;
  int micro_installed = $lf_micro_installed;

  int major_required = $lf_major_required;
  int minor_required = $lf_minor_required;
  int micro_required = $lf_micro_required;

  if ((major_installed > major_required) ||
      ((major_installed == major_required) && 
       (minor_installed > minor_required)) ||
      ((major_installed == major_required) &&
       (minor_installed == minor_required) &&
       (micro_installed >= micro_required)))
  {
    return 0;
  }
  else    
  {
    return 1;
  }
}
    ],[ AC_MSG_RESULT(yes) ],
      [ AC_MSG_RESULT(no) 
        echo "** Installed version is `[$]$1 --version`"
        echo "** The installed version is older than the one required by"
        echo "** this package. Please upgrade the needed library package."
        echo "** If you have already installed an upgraded version, then"
        echo "** check whether you have an old copy also lying around whose"
        echo "** config script is detected instead of the config script for"
        echo "** the newer version."
        exit 1 ],
      [ echo $ac_n "cross compiling; assumed OK... $ac_c"])
  fi
])
 
dnl#-----------------------------------------------------------------------
dnl Usage:
dnl  LF_QUERY_LIBRARY_SPECIFIC(libname,config-script,flag,variable)
dnl Invoke the configure script and obtain information for a specific 
dnl library and export that information on a given symbol.
dnl libname       -> the name of the library, as is understood by the
dnl                  config script
dnl config-script -> the config script as obtained from the 
dnl                  LF_NEED_LIBRARY_PACKAGE macro
dnl flag          -> can be one of: cflags, libs, libs-only-L, libs-onlyl,
dnl                  prefix, exec-prefix, etc....
dnl variable      -> the variable where we'd like to store the answer
dnl#-----------------------------------------------------------------------

AC_DEFUN([LF_QUERY_LIBRARY_SPECIFIC],[
  dnl Now get the information 
  $4="`[$]$2 --$3 $1`"
  AC_SUBST($4)
])

dnl#-----------------------------------------------------------------------
dnl# Usage:
dnl#   LF_QUERY_LIBRARY(libname,config-script,Lflags,lflags,cflags)
dnl# Invoke the configure script and obtain ALL information for a 
dnl# given library.
dnl#-----------------------------------------------------------------------

AC_DEFUN([LF_QUERY_LIBRARY],[
  echo "checking for $1 in [$]$2"
  LF_QUERY_LIBRARY_SPECIFIC($1,$2,libs-only-L,$3)
  echo " -- linker lags: [$]$3"
  LF_QUERY_LIBRARY_SPECIFIC($1,$2,libs-only-l,$4)
  echo " -- library flags: [$]$4"
  LF_QUERY_LIBRARY_SPECIFIC($1,$2,cflags,$5)
  echo " -- compiler flags: [$]$5"
])

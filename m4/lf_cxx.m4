dnl# Autoconf support for C++
dnl# Copyright (C) 1988 Eleftherios Gkioulekas <lf@amath.washington.edu>
dnl# 
dnl# This program is free software; you can redistribute it and/or modify
dnl# it under the terms of the GNU General Public License as published by
dnl# the Free Software Foundation; either version 2 of the License, or
dnl# (at your option) any later version.
dnl#
dnl# This program is distributed in the hope that it will be useful,
dnl# but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl# GNU General Public License for more details.
dnl# 
dnl# You should have received a copy of the GNU General Public License
dnl# along with this program; if not, write to:
dnl#  The Free Software Foundation, Inc.
dnl#  59 Temple Place - Suite 330
dnl#  Boston, MA 02111-1307, USA.
dnl# 
dnl# As a special exception to the GNU General Public License, if you 
dnl# distribute this file as part of a program with a configuration 
dnl# script generated by Autoconf, you may include it under the same 
dnl# distribution terms that you use for the rest of that program.

# -----------------------------------------------------------------
# This macro should be called to configure your C++ compiler.
# When called, the macro does the following things:
# 1. It finds an appropriate C++ compiler
#    If you passed the flag --with-cxx=foo, then it uses that
#    particular compiler
# 2. Checks whether the compiler accepts the -g 
# ------------------------------------------------------------------

AC_DEFUN([LF_CONFIGURE_CXX],[
 AC_REQUIRE([AC_PROG_CXX])
 AC_REQUIRE([AC_PROG_CXXCPP])
 AC_REQUIRE([AC_PROG_CXX_C_O])
 AC_REQUIRE([LF_CPP_PORTABILITY])
])

# -----------------------------------------------------------------------
# This macro tests the C++ compiler for various portability problem.
# 1. Defines CXX_HAS_NO_BOOL if the compiler does not support the bool
#    data type
# 2. Defines CXX_HAS_BUGGY_FOR_LOOPS if the compiler has buggy
#    scoping for the for-loop
# 3. Defines USE_ASSERT if the user wants to use assertions
# Seperately we provide some config.h.bot code to be added to acconfig.h
# that implements work-arounds for these problems.
# -----------------------------------------------------------------------

AC_DEFUN([LF_CPP_PORTABILITY],[
  dnl# moved from a separate "ACCONFIG" "TEMPLATE" that was above in some
  dnl# m4 comments:
  AH_TEMPLATE([CXX_HAS_BUGGY_FOR_LOOPS],
              [Define to 1 if C++ has buggy for-loops])
  AH_TEMPLATE([CXX_HAS_NO_BOOL],[Define to 1 if C++ has no bool])
  AH_TEMPLATE([NDEBUG],[Define to 1 to turn off assertions])

  dnl#
  dnl# Check for common C++ portability problems
  dnl#

  AC_REQUIRE([AC_PROG_CXX])
  AC_LANG_PUSH([C++])

  dnl# Check whether we have bool:
  AC_REQUIRE([AC_HEADER_STDBOOL])
  AC_MSG_CHECKING([whether C++ has bool])
  AC_RUN_IFELSE([AC_LANG_SOURCE([[
main() { bool b1=true; bool b2=false; }
  ]])],[AC_MSG_RESULT([yes])],
       [AC_MSG_RESULT([no])
        AC_DEFINE([CXX_HAS_NO_BOOL],[1],
                  [Define to 1 if C++ has no bool])],
       [AC_MSG_WARN([Please avoid cross-compiling when using this macro])])

  dnl# Test whether C++ has buggy for-loops:
  AC_CHECK_HEADERS_ONCE([iostream.h])
  AC_MSG_CHECKING([whether C++ has buggy scoping in for-loops])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <iostream.h>]],[[
   for (int i = 0; i < 10; i++) { }
   for (int i = 0; i < 10; i++) { }
  ]])],[AC_MSG_RESULT([no])],
       [AC_MSG_RESULT([yes])
        AC_DEFINE([CXX_HAS_BUGGY_FOR_LOOPS],[1],
                  [Define to 1 if C++ has buggy for-loops])])

  dnl# Test whether the user wants to enable assertions
  AC_MSG_CHECKING([whether user wants C++ assertions])
  AC_ARG_ENABLE([cpp-assert],
                [AS_HELP_STRING([--disable-cpp-assert],
                                [avoid use of cpp.h assert])],
                [AC_DEFINE([NDEBUG],[1],
                           [Define to 1 to turn off assertions])
                 AC_MSG_RESULT([no])],
                [AC_MSG_RESULT([yes])
                 AC_CHECK_HEADERS_ONCE([assert.h cpp.h])],[])

  dnl# moved from a separate "ACCONFIG" "BOTTOM" section that was below in
  dnl# some m4 comments:
  AH_BOTTOM([
#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
// This config header section defines portability work-arounds for
// various proprietory C++ compilers.

// Workaround for compilers with buggy for-loop scoping
// That is quite a few compilers actually including recent versions of
// Dec Alpha cxx, HP-UX CC and SGI CC.
// The trivial "if" statement provides the correct scoping to the 
// for-loop:
# ifdef CXX_HAS_BUGGY_FOR_LOOPS
#  undef for
#  define for if(1) for
# endif /* CXX_HAS_BUGGY_FOR_LOOPS */

//
// Fortran-like integer looping macros
// these critters depend on the scoping work-around above
//
# define loop(COUNTER,BEGIN,END)  \
for (int COUNTER = BEGIN ; COUNTER <= END ; COUNTER ## ++)

# define inverse_loop(COUNTER,END,BEGIN) \
for (int COUNTER = END; COUNTER >= BEGIN; COUNTER ## --)

# define integer_loop(COUNTER,BEGIN,END,STEP) \
for (int COUNTER = BEGIN; COUNTER <= END; COUNTER += STEP)

//
// Class protection levels
// addictive syntactic sugar to make coding nicer:
//
# define pub public:
# define pro protected:
# define pri private:

//
// Every mathematician would like to know pi
// so this is as good a place as any to throw it in.
//
# ifndef pi
#  define pi 3.14159265358979324
# endif /* !pi */

//
// If the C++ compiler we use does NOT have bool, then
// the following is a near-perfect work-around. 
// You must make sure your code does not depend on "int" and "bool"
// being two different types, in overloading for instance.
//
# ifdef CXX_HAS_NO_BOOL
#  if !defined(bool) && !defined(true) && !defined(false)
#   define bool int
#   define true 1
#   define false 0
#  else
#   if defined(__GNUC__) && !defined(__STRICT_ANSI__) && defined(__cplusplus)
#    warning "we need bool, but cannot successfully (re)define it"
#   endif /* __GNUC__ && !__STRICT_ANSI__ && __cplusplus */
#  endif /* !bool && !true && !false */
# endif /* CXX_HAS_NO_BOOL */

// assertions:
# ifdef HAVE_ASSERT_H
#  include <assert.h>
# else
#  if defined(__GNUC__) && !defined(__STRICT_ANSI__) && defined(__cplusplus)
#   warning "this header expects <assert.h> to be included."
#  endif /* __GNUC__ && !__STRICT_ANSI__ && __cplusplus */
# endif /* HAVE_ASSERT_H */
#endif /* __cplusplus || !__STRICT_ANSI__ */
  ])
  dnl# (not sure if autoheader respects the "AC_LANG" being "PUSH"ed...)

  dnl# Done with the portability checks, so can restore language:
  AC_LANG_POP([])
])
